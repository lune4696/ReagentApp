{"version":3,"sources":["app/hello.cljs"],"mappings":"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","names":["cljs.core/deref","app.hello/click-counter","c","cljs.core.swap_BANG_","cljs.core/inc","app.hello/map-with-key","f","coll","cljs.core.map_indexed","i","app.hello/get-json","path","a","js/fetch","p1__46078#","p1__46079#","cljs.core/reset!","cljs.core.js__GT_clj","app.hello/load-json","data","cljs.core/keys","app.hello/counters","reagent.core.atom","app.hello/bmi-data","app.bmi/calc-bmi","app.hello/plot-data","cljs.core.range","cljs.core.map","cljs.core/identity","cljs.core.take","p1__46117#","app.hello/hand-frames","app.hello/stream-data","p__46156","map__46157","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","app.hello/calc-idx","length","knob","cljs.core.assoc","app.hello/stream-seekbar","map__46174","vec__46175","cljs.core.nth","idx","color","status","cljs.core._EQ_","app.ui/slider","app.hello/layout","app.hello/plot-node","cljs.core.atom","app.hello/current-page","app.hello/filepath","app.hello/input-filepath","app.ui/text-input","app.hello/experiment-data","app.hello/page-home","app.ui/lister","app.ui/timer","app.bmi/bmi","app.plot/plot","app.plot/update-plot","app.box/rolling-box","app.hand/hand-skeleton","cljs.core/not","frames","cljs.core/first","cljs.core/val","cljs.core/count","app.hello/page-plot","app.hello/rooter","G__46185","cljs.core/Keyword","js/Error","app.hello/hello"],"sourcesContent":["(ns app.hello\n  (:require [reagent.core :as r]\n            [app.ui :as ui]\n            [app.plot :as plt]\n            [app.box :as box]\n            [app.bmi :as bmi]\n            [app.hand :as hand]))\n\n(defn click-counter [c]\n  [:div \"The atom \" [:code \"click-count\"] \" has value: \" @c \". \"\n   [:input {:type \"button\" :value \"Click me!\" :on-click #(swap! c inc)}]])\n\n(defn map-with-key\n  {:doc \"\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306e\u5404\u8981\u7d20\u306b\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3092\u8fd4\u5374\u3059\u308b\u95a2\u6570 f \u3092\u9069\u7528\u3057\u305f\u3046\u3048\u3067\u3001react key \u3092\u4ed8\u4e0e\"}\n  [f coll]\n  (->> coll (map-indexed (fn [i c] ^{:key i} [f c]))))\n\n(defn get-json [path a]\n  (-> (js/fetch path)\n      (.then #(.json %))\n      (.then #(reset! a (js->clj % :keywordize-keys true)))))\n\n(defn load-json [path data]\n  [:div \"Data keys: \" (if @data (keys @data) \"nil\") \". \"\n   [:input {:type \"button\" :value \"Load\" :on-click #(get-json @path data)}]])\n\n(def counters [(r/atom 0) (r/atom 1) (r/atom 2)])\n(def bmi-data (r/atom (bmi/calc-bmi {:height 100 :weight 80})))\n(def plot-data (r/atom  [{:x (->> (range) (map identity) (take 5) )\n                     :y (->> (range) (map #(* % %)) (take 5) )\n                     :type \"scatter\"}]))\n\n(def hand-frames [[0.405458003282547, 0.221318066120148, 7.94157188011013e-7, 0.314183413982391, 0.256055176258087, -0.034264475107193, 0.241226002573967, 0.351229131221771, -0.0572676062583923, 0.182741954922676, 0.439660787582397, -0.0713735744357109, 0.126925468444824, 0.482412815093994, -0.0880364179611206, 0.311765193939209, 0.439618438482285, -0.0944081544876099, 0.273363918066025, 0.606201767921448, -0.124245822429657, 0.250764429569244, 0.707834005355835, -0.137449502944946, 0.233733177185059, 0.785610795021057, -0.14565996825695, 0.380796015262604, 0.463617146015167, -0.0889979153871536, 0.361985117197037, 0.654848635196686, -0.117317572236061, 0.34815913438797, 0.769244432449341, -0.132864385843277, 0.337600708007813, 0.851318299770355, -0.143793419003487, 0.439069390296936, 0.464687526226044, -0.0809037685394287, 0.431916892528534, 0.636671483516693, -0.105546213686466, 0.424235582351685, 0.740925073623657, -0.122906133532524, 0.418837070465088, 0.816608548164368, -0.13470147550106, 0.483206987380981, 0.448356211185455, -0.0727889910340309, 0.474570453166962, 0.557963907718658, -0.0958688706159592, 0.466807931661606, 0.620824813842773, -0.107139177620411, 0.461127102375031, 0.670479714870453, -0.112998880445957],\n                  [0.39645528793335, 0.204100638628006, 9.29146381167811e-7, 0.307998716831207, 0.248671442270279, -0.0283078607171774, 0.235991090536118, 0.34454333782196, -0.0518164560198784, 0.173126876354218, 0.425929754972458, -0.0671248435974121, 0.115072429180145, 0.468245148658752, -0.0863110348582268, 0.302755653858185, 0.42740336060524, -0.095828115940094, 0.262853145599365, 0.592306733131409, -0.123260788619518, 0.239759266376495, 0.69003826379776, -0.134415313601494, 0.222313314676285, 0.764001488685608, -0.141289606690407, 0.373705089092255, 0.445354819297791, -0.0944230332970619, 0.356344610452652, 0.637420773506165, -0.123775504529476, 0.341039001941681, 0.751492500305176, -0.139342308044434, 0.326699495315552, 0.833506286144257, -0.149602517485619, 0.434019237756729, 0.442595213651657, -0.0888519063591957, 0.425826996564865, 0.622573137283325, -0.116138644516468, 0.411985635757446, 0.72850239276886, -0.134875357151032, 0.400024652481079, 0.804420292377472, -0.147466957569122, 0.480335772037506, 0.422668159008026, -0.0818316861987114, 0.469015896320343, 0.528851270675659, -0.10665462911129, 0.45570707321167, 0.567793846130371, -0.114863626658916, 0.445267856121063, 0.58944183588028, -0.118112236261368],\n                  [0.400955498218536, 0.205585330724716, 9.38118489557382e-7, 0.310901552438736, 0.247439190745354, -0.0293404627591372, 0.237640038132668, 0.345006465911865, -0.0528106316924095, 0.174135193228722, 0.429725468158722, -0.0675355494022369, 0.115332558751106, 0.473879545927048, -0.0862407013773918, 0.302856206893921, 0.42409747838974, -0.0969566255807877, 0.264999538660049, 0.592138946056366, -0.125136256217957, 0.24180069565773, 0.691242218017578, -0.136904492974281, 0.22350138425827, 0.766949772834778, -0.14394323527813, 0.373763084411621, 0.444617450237274, -0.0944573059678078, 0.357569664716721, 0.637337446212769, -0.124440521001816, 0.342149674892426, 0.751557588577271, -0.140231996774673, 0.327044934034348, 0.833150506019592, -0.150456622242928, 0.434781581163406, 0.445273488759995, -0.0878696367144585, 0.426084339618683, 0.626259922981262, -0.117221802473068, 0.411892145872116, 0.730520248413086, -0.137139424681664, 0.40092408657074, 0.803186118602753, -0.149988174438477, 0.481943368911743, 0.429522097110748, -0.0796982869505882, 0.468256086111069, 0.533265590667725, -0.106856465339661, 0.452778249979019, 0.562870264053345, -0.115655839443207, 0.440409541130066, 0.576109945774078, -0.118771947920322]])\n\n(def stream-data (r/atom {:frames hand-frames :length 3 :idx 0 :knob 0.0 :pause false}))\n(defn calc-idx [{:keys [length knob] :as data}] (assoc data :idx (* length knob 1e-3)))\n(defn stream-seekbar [data]\n  (let [{:keys [length idx knob]} @data\n        [color status] (cond (= knob 0) [\"red\" \"start\"]\n                             (= knob 1000) [\"blue\" \"end\"]\n                             :else [\"green\" \"progress\"])]\n    [:div \"Frame: \" (int idx) \" / \" (int length) \" \"\n     [:span {:style {:color color}} status]\n     [ui/slider data :knob knob 0 1000 :idx calc-idx]]))\n\n(def layout (r/atom {:title \"Sample\"}))\n\n(def plot-node (atom nil))\n\n(def current-page (r/atom :home))\n\n(def filepath (r/atom nil))\n(defn input-filepath [a] [:div [:p \"JsonPath: \" @a [:br] \"Input: \" [ui/text-input a]]])\n\n(def experiment-data (r/atom nil))\n\n(def page-home\n  [:<>\n   [:p.someclass \"Hello world, \" [:strong \"ReagentApp\"] \" is running!\"]\n   [:p [:strong \"\u518d\u63cf\u753b\"] \"\u53ef\u80fd\u306a\u30ea\u30b9\u30c8\"] [ui/lister (->> counters (map-with-key click-counter))]\n   [:p] [ui/timer]\n   [:p] [bmi/bmi bmi-data]\n   [:p] [:section\n         [:p \"plotly.js \u306b\u3088\u308b\u30d7\u30ed\u30c3\u30c8\"]\n         [plt/plot {:data plot-data :layout layout :node plot-node}]\n         [:button {:on-click #(plt/update-plot {:data plot-data :node plot-node})} \"Update Plot\"]]\n   [:p] [box/rolling-box {}]\n   [:p] [hand/hand-skeleton {:stream stream-data}]\n   [:p] [stream-seekbar stream-data]\n   [:p] [:div [:input {:type \"button\"\n                       :value \"start / stop\"\n                       :on-click #(swap! stream-data\n                                         (fn [a] (assoc a :pause (not (:pause a)))))}]]\n   [:p] [input-filepath filepath]\n   [:p] [load-json filepath experiment-data]\n   [:p] [:div\n         [:input {:type \"button\"\n                  :value \"Set new data\"\n                  :on-click #(swap! stream-data\n                                    (fn [a] (let [frames (->> @experiment-data\n                                                              first val\n                                                              :y-train)]\n                                              (assoc a :frames frames :length (count frames)))))}]]])\n\n(def page-plot [:<>\n   [:p.someclass \"This is \" [:strong \"Plot\"] \" page\"]\n   [:p] [:section\n         [:p \"plotly.js \u306b\u3088\u308b\u30d7\u30ed\u30c3\u30c8\"]\n         [plt/plot {:data plot-data :layout layout :node plot-node}]\n         [:button {:on-click #(plt/update-plot {:data plot-data :node plot-node})} \"Update Plot\"]]])\n\n(defn rooter []\n  (fn []\n    (case @current-page\n      :home page-home\n      :plot page-plot)))\n\n(defn hello [] (rooter))\n"]}