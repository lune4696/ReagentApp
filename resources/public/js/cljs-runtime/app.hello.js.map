{"version":3,"sources":["app/hello.cljs"],"mappings":"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","names":["cljs.core/deref","app.hello/click-counter","c","cljs.core.swap_BANG_","cljs.core/inc","app.hello/click-count","reagent.core.atom","app.hello/counters","app.hello/map-with-key","f","coll","cljs.core.map_indexed","i","app.hello/lister-simple","items","cljs.core/with-meta","app.hello/timer-fn-component","with-let35574","reagent.ratom/with-let-values","temp__5739__auto__","reagent.ratom/*ratom-context*","c__35433__auto__","reagent.debug/has-console","reagent.debug/tracking","reagent.debug/track-console","js/console","init35575","cljs.core/not","res35576","seconds-elapsed","js/setTimeout","p1__35577#","app.hello/atom-input","value","cljs.core/reset!","app.hello/shared-state","val","p__35578","map__35579","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","app.hello/calc-bmi","height","weight","bmi","data","h","cljs.core.assoc","app.hello/bmi-data","app.hello/slider","param","min","max","invalidates","e","new-value","js/parseInt","cljs.core.dissoc","app.hello/bmi-component","map__35581","vec__35582","cljs.core.nth","color","diagnose","p__35586","map__35587","app.hello/plot","layout","node","with-let35589","init35590","res35591","destroy__35432__auto__","reagent.ratom/reactive?","el","reagent.core/after-render","js/module$node_modules$plotly_DOT_js_dist_min$plotly_min","cljs.core/clj->js","p__35593","map__35594","app.hello/update-plot","cljs.core.range","cljs.core.map","cljs.core/identity","cljs.core.take","p1__35592#","app.hello/data","p1__35596#","app.hello/layout","app.hello/plot-node","cljs.core.atom","app.hello/current-page","app.hello/page-home","app.hello/page-plot","app.hello/rooter","G__35597","cljs.core/Keyword","js/Error","app.hello/hello"],"sourcesContent":["(ns app.hello\n  (:require [reagent.core :as r] \n            [\"plotly.js-dist-min\" :as Plotly]))\n\n(defn click-counter [c]\n  [:div\n   \"The atom \" [:code \"click-count\"] \" has value: \"\n   @c \". \"\n   [:input {:type \"button\" :value \"Click me!\"\n            :on-click #(swap! c inc)}]])\n\n(def click-count (r/atom 0))\n(def counters [(r/atom 0) (r/atom 1) (r/atom 2)])\n\n(defn map-with-key\n  {:doc \"\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306e\u5404\u8981\u7d20\u306b\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3092\u8fd4\u5374\u3059\u308b\u95a2\u6570 f \u3092\u9069\u7528\u3057\u305f\u3046\u3048\u3067\u3001react key \u3092\u4ed8\u4e0e\"}\n  [f coll]\n  (->> coll (map-indexed (fn [i c] ^{:key i} [f c]))))\n\n(defn lister-simple\n  {:doc \"\u30ea\u30b9\u30c8\"\n   :comments [\"^{:key item} \u306f\u5fc5\u305a\u3057\u3082\u5fc5\u8981\u306a\u3044\u304c\u3001\u30ea\u30b9\u30c8\u306b\u5bfe\u3057\u3066\u30e6\u30cb\u30fc\u30af\u30ad\u30fc\u3092\u4ed8\u4e0e\u3059\u308b\u3068\n               React \u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u6539\u5584\u306b\u5f79\u7acb\u3064 (by reagent tutorial)\"\n              \"\u5b9f\u969b\u306b\u306f\u5f15\u304d\u6e21\u3055\u306a\u3044\u3068\u63cf\u753b\u30d0\u30b0\u304c\u8d77\u304d\u3084\u3059\u3044\u306e\u3067\u3001\u7d76\u5bfe\u6e21\u3055\u306a\u3044\u3068\u3044\u3051\u306a\u3044\"\n              \"\u30ad\u30fc\u306e\u4ed8\u4e0e\u306f\u3001\u4e0a\u8a18\u306e\u3088\u3046\u306b\u30e1\u30bf\u30c7\u30fc\u30bf\u304b\u3001\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306e\u7b2c\u4e00\u5f15\u6570\u3068\u3057\u3066\u6e21\u3059\"\n              \"ul: un-ordered list, ol: ordered-list, li: list\"]}\n  [items] [:ul (->> items (map-indexed (fn [i c] (with-meta [:li \"Item: \" c] {:key i}))))])\n\n\n(defn timer-fn-component []\n  (r/with-let [seconds-elapsed (r/atom 0)]\n    (js/setTimeout #(swap! seconds-elapsed inc) 1000)\n    [:div \"Seconds Elapsed: \" @seconds-elapsed]))\n\n\n(defn atom-input\n  {:comments [\":input \u30de\u30c3\u30d7\u306e :on-change \u95a2\u6570\u306b\u306f react \u304b\u3089 event object \u304c\u6e21\u3055\u308c\u308b\"\n              \".-<any> \u306f\u30d5\u30a3\u30fc\u30eb\u30c9\u30a2\u30af\u30bb\u30b9\"\n              \"\u3053\u306e\u5834\u5408 event.target.value \u3067 value \u3092\u66f4\u65b0\u3057\u3066\u3044\u308b\"]}\n  [value]\n  [:input {:type \"text\"\n           :value @value\n           :on-change #(reset! value (-> % .-target .-value))}])\n\n(defn shared-state []\n  (let [val (r/atom \"foo\")]\n    (fn []\n      [:div\n       [:p\n        \"The value is now: \" @val [:br] \"Change it here: \" [atom-input val]]])))\n\n(defn calc-bmi [{:keys [height weight bmi] :as data}]\n  (let [h (/ height 100)]\n    (if (nil? bmi)\n      (assoc data :bmi (/ weight (* h h)))\n      (assoc data :weight (* bmi h h)))))\n\n(def bmi-data (r/atom (calc-bmi {:height 100 :weight 80})))\n\n(defn slider [param value min max invalidates]\n  [:input {:type \"range\"\n           :value value\n           :min min\n           :max max\n           :style {:width \"100%\"}\n           :on-change (fn [e]\n                        (let [new-value (js/parseInt (.. e -target -value))]\n                          (swap! bmi-data\n                                 (fn [data]\n                                   (-> data\n                                       (assoc param new-value)\n                                       (dissoc invalidates)\n                                       (calc-bmi))))))}])\n\n(defn bmi-component []\n  (let [{:keys [weight height bmi]} @bmi-data\n        [color diagnose] (cond\n                          (< bmi 18.5) [\"orange\" \"underweight\"]\n                          (< bmi 25) [\"inherit\" \"normal\"]\n                          (< bmi 30) [\"orange\" \"overweight\"]\n                          :else [\"red\" \"obese\"])]\n    [:div\n     [:h3 \"BMI calculator\"]\n     [:div\n      \"Height: \" (int height) \"cm\"\n      [slider :height height 100 220 :bmi]]\n     [:div\n      \"Weight: \" (int weight) \"kg\"\n      [slider :weight weight 30 150 :bmi]]\n     [:div\n      \"BMI: \" (int bmi) \" \"\n      [:span {:style {:color color}} diagnose]\n      [slider :bmi bmi 10 50 :weight]]]))\n\n\n(defn plot [{:keys [data layout node]}]\n  (r/with-let [f (fn [el]\n                   (when el\n                     (reset! node el)\n                     (r/after-render #(.newPlot Plotly @node (clj->js @data) (clj->js @layout)))) )]\n    [:div {:ref f}]\n    (finally (when @node (.purge Plotly @node)))))\n\n(defn update-plot [{:keys [data node]}]\n  (reset! data [{:x (->> (range) (map identity) (take 5))\n                 :y (->> (range) (map #(* 2 %)) (take 5))\n                 :type \"scatter\"}])\n  (when @node\n    (.react Plotly @node (clj->js @data) (clj->js nil))))\n\n\n(def data (r/atom  [{:x (->> (range) (map identity) (take 5) )\n                     :y (->> (range) (map #(* % %)) (take 5) )\n                     :type \"scatter\"}]))\n(def layout (r/atom {:title \"Sample\"}))\n(def plot-node (atom nil))\n\n(def current-page (r/atom :home))\n\n(def page-home\n  [:<>\n   [:p.someclass \"Hello world, \" [:strong \"ReagentApp\"] \" is running!\"]\n   [:p [:strong \"\u518d\u63cf\u753b\"] \"\u53ef\u80fd\u306a\u30ea\u30b9\u30c8\"] [lister-simple (->> counters (map-with-key click-counter))]\n   [:p [:strong \"\u518d\u63cf\u753b\"] \"\u53ef\u80fd\u306a\u30ea\u30b9\u30c8\"] [lister-simple (range 3)]\n   [:p] [timer-fn-component]\n   [:p] [shared-state]\n   [:p] [bmi-component]\n   [:p] [:section\n         [:p \"plotly.js \u306b\u3088\u308b\u30d7\u30ed\u30c3\u30c8\"]\n         [plot {:data data :layout layout :node plot-node}]\n         [:button {:on-click #(update-plot {:data data :node plot-node})} \"Update Plot\"]]])\n\n(def page-plot [:<>\n   [:p.someclass \"This is \" [:strong \"Plot\"] \" page\"]\n   [:p] [:section\n         [:p \"plotly.js \u306b\u3088\u308b\u30d7\u30ed\u30c3\u30c8\"]\n         [plot {:data data :layout layout :node plot-node}]\n         [:button {:on-click #(update-plot {:data data :node plot-node})} \"Update Plot\"]]])\n\n(defn rooter []\n  (fn []\n    (case @current-page\n      :home page-home\n      :plot page-plot)))\n\n(defn hello [] (rooter))\n\n\n;; (defn timer-component []\n;;   (let [seconds-elapsed (r/atom 0)]\n;;     (fn []\n;;       (js/setTimeout #(swap! seconds-elapsed inc) 1000)\n;;       [:div\n;;        \"Seconds Elapsed: \" @seconds-elapsed])))\n\n;; (defn timer-class-component []\n;;   (let [seconds-elapsed (r/atom 0)]\n;;     (r/create-class                     ;; \u30af\u30e9\u30b9\u306a\u306e\u3067\u5185\u90e8\u72b6\u614b\u3092\u6301\u3066\u308b\n;;      {:component-did-mount              ;; DOM \u306b\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u304c\u30de\u30a6\u30f3\u30c8\u3055\u308c\u305f\u76f4\u5f8c\u306e\u307f\u547c\u3070\u308c\u308b\n;;       (fn []\n;;         (js/setInterval #(swap! seconds-elapsed inc) 1000))\n;;       :reagent-render                   ;; \u30af\u30e9\u30b9\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306b\u5bfe\u3059\u308b render \u51e6\u7406\n;;       (fn []\n;;         [:div \"Seconds Elapsed: \" @seconds-elapsed])})))\n\n;; \u30b0\u30ed\u30fc\u30d0\u30eb\u306e\u6642\u9593\u30ab\u30a6\u30f3\u30c8\n;; (def sec (r/atom 0))\n;; (->> (js/setInterval #(swap! sec inc) 1000))\n"]}