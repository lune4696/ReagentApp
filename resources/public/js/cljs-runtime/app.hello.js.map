{"version":3,"sources":["app/hello.cljs"],"mappings":"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","names":["cljs.core/deref","app.hello/click-counter","c","cljs.core.swap_BANG_","cljs.core/inc","app.hello/click-count","reagent.core.atom","app.hello/counters","app.hello/map-with-key","f","coll","cljs.core.map_indexed","i","app.hello/lister-simple","items","cljs.core/with-meta","app.hello/timer-fn-component","with-let42403","reagent.ratom/with-let-values","temp__5739__auto__","reagent.ratom/*ratom-context*","c__34580__auto__","reagent.debug/has-console","reagent.debug/tracking","reagent.debug/track-console","js/console","init42404","cljs.core/not","res42405","seconds-elapsed","js/setTimeout","p1__42406#","app.hello/atom-input","value","cljs.core/reset!","app.hello/shared-state","val","p__42407","map__42408","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","app.hello/calc-bmi","height","weight","bmi","data","h","cljs.core.assoc","app.hello/bmi-data","app.hello/slider","param","min","max","invalidates","e","new-value","js/parseInt","cljs.core.dissoc","app.hello/bmi-component","map__42410","vec__42411","cljs.core.nth","color","diagnose","p__42415","map__42416","app.hello/plot","layout","node","with-let42418","init42419","res42420","destroy__34579__auto__","reagent.ratom/reactive?","el","reagent.core/after-render","js/module$node_modules$plotly_DOT_js_dist_min$plotly_min","cljs.core/clj->js","p__42422","map__42423","app.hello/update-plot","cljs.core.range","cljs.core.map","cljs.core/identity","cljs.core.take","p1__42421#","p__42425","map__42426","app.hello/rolling-box","width","ratio","opt","with-let42428","init42429","res42430","cljs.core.atom","scene","js/module$node_modules$three$build$three_cjs.Scene","camera","js/module$node_modules$three$build$three_cjs.PerspectiveCamera","renderer","js/module$node_modules$three$build$three_cjs.WebGLRenderer","geometry","js/module$node_modules$three$build$three_cjs.BoxGeometry","box-material","js/module$node_modules$three$build$three_cjs.MeshStandardMaterial","color-bg","js/module$node_modules$three$build$three_cjs.Color","box","js/module$node_modules$three$build$three_cjs.Mesh","light","js/module$node_modules$three$build$three_cjs.DirectionalLight","ambient","js/module$node_modules$three$build$three_cjs.AmbientLight","update-size","w","or__4126__auto__","controls","js/module$node_modules$three$examples$jsm$controls$OrbitControls.OrbitControls","js/window.addEventListener","js/devicePixelRatio","js/requestAnimationFrame","tick","js/window.removeEventListener","p__42431","map__42432","app.hello/sphere-three","radius","w-segments","h-segments","geom","js/module$node_modules$three$build$three_cjs.SphereGeometry","material","js/module$node_modules$three$build$three_cjs.MeshBasicMaterial","p__42434","map__42435","app.hello/hand-joint-three","xyz","cljs.core.partition_all","p__42437","vec__42438","x","y","z","mesh","cljs.core/vec","p__42441","map__42442","app.hello/line-three","p1","p2","points","js/module$node_modules$three$build$three_cjs.BufferGeometry","js/module$node_modules$three$build$three_cjs.Line","js/module$node_modules$three$build$three_cjs.LineBasicMaterial","app.hello/hand-bone-three","spheres","bones","p__42444","vec__42445","j","app.hello/hand-bones","p__42448","map__42449","app.hello/hand","hand-pos","with-let42451","init42452","res42453","hand-joints","hand-lines","cljs.core.println","cljs.core/first","seq__42454","cljs.core/seq","chunk__42455","count__42456","i__42457","temp__5735__auto__","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/next","a","seq__42458","chunk__42459","count__42460","i__42461","app.hello/data","p1__42462#","app.hello/layout","app.hello/plot-node","app.hello/hand-landmark","app.hello/testdata-hand","app.hello/current-page","app.hello/page-home","app.hello/page-plot","app.hello/rooter","G__42463","cljs.core/Keyword","js/Error","app.hello/hello"],"sourcesContent":["(ns app.hello\n  (:require [reagent.core :as r] \n            [\"plotly.js-dist-min\" :as Plotly]\n            [\"three\" :as Three]\n            [\"three/examples/jsm/controls/OrbitControls.js\" :refer [OrbitControls]]\n            ;; [\"three/addons/controls/OrbitControls.js\" :refer [OrbitControls]]\n            ))\n\n(defn click-counter [c]\n  [:div\n   \"The atom \" [:code \"click-count\"] \" has value: \"\n   @c \". \"\n   [:input {:type \"button\" :value \"Click me!\"\n            :on-click #(swap! c inc)}]])\n\n(def click-count (r/atom 0))\n(def counters [(r/atom 0) (r/atom 1) (r/atom 2)])\n\n(defn map-with-key\n  {:doc \"\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306e\u5404\u8981\u7d20\u306b\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3092\u8fd4\u5374\u3059\u308b\u95a2\u6570 f \u3092\u9069\u7528\u3057\u305f\u3046\u3048\u3067\u3001react key \u3092\u4ed8\u4e0e\"}\n  [f coll]\n  (->> coll (map-indexed (fn [i c] ^{:key i} [f c]))))\n\n(defn lister-simple\n  {:doc \"\u30ea\u30b9\u30c8\"\n   :comments [\"^{:key item} \u306f\u5fc5\u305a\u3057\u3082\u5fc5\u8981\u306a\u3044\u304c\u3001\u30ea\u30b9\u30c8\u306b\u5bfe\u3057\u3066\u30e6\u30cb\u30fc\u30af\u30ad\u30fc\u3092\u4ed8\u4e0e\u3059\u308b\u3068\n               React \u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u6539\u5584\u306b\u5f79\u7acb\u3064 (by reagent tutorial)\"\n              \"\u5b9f\u969b\u306b\u306f\u5f15\u304d\u6e21\u3055\u306a\u3044\u3068\u63cf\u753b\u30d0\u30b0\u304c\u8d77\u304d\u3084\u3059\u3044\u306e\u3067\u3001\u7d76\u5bfe\u6e21\u3055\u306a\u3044\u3068\u3044\u3051\u306a\u3044\"\n              \"\u30ad\u30fc\u306e\u4ed8\u4e0e\u306f\u3001\u4e0a\u8a18\u306e\u3088\u3046\u306b\u30e1\u30bf\u30c7\u30fc\u30bf\u304b\u3001\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306e\u7b2c\u4e00\u5f15\u6570\u3068\u3057\u3066\u6e21\u3059\"\n              \"ul: un-ordered list, ol: ordered-list, li: list\"]}\n  [items] [:ul (->> items (map-indexed (fn [i c] (with-meta [:li \"Item: \" c] {:key i}))))])\n\n\n(defn timer-fn-component []\n  (r/with-let [seconds-elapsed (r/atom 0)]\n    (js/setTimeout #(swap! seconds-elapsed inc) 1000)\n    [:div \"Seconds Elapsed: \" @seconds-elapsed]))\n\n\n(defn atom-input\n  {:comments [\":input \u30de\u30c3\u30d7\u306e :on-change \u95a2\u6570\u306b\u306f react \u304b\u3089 event object \u304c\u6e21\u3055\u308c\u308b\"\n              \".-<any> \u306f\u30d5\u30a3\u30fc\u30eb\u30c9\u30a2\u30af\u30bb\u30b9\"\n              \"\u3053\u306e\u5834\u5408 event.target.value \u3067 value \u3092\u66f4\u65b0\u3057\u3066\u3044\u308b\"]}\n  [value]\n  [:input {:type \"text\"\n           :value @value\n           :on-change #(reset! value (-> % .-target .-value))}])\n\n(defn shared-state []\n  (let [val (r/atom \"foo\")]\n    (fn []\n      [:div\n       [:p\n        \"The value is now: \" @val [:br] \"Change it here: \" [atom-input val]]])))\n\n(defn calc-bmi [{:keys [height weight bmi] :as data}]\n  (let [h (/ height 100)]\n    (if (nil? bmi)\n      (assoc data :bmi (/ weight (* h h)))\n      (assoc data :weight (* bmi h h)))))\n\n(def bmi-data (r/atom (calc-bmi {:height 100 :weight 80})))\n\n(defn slider [param value min max invalidates]\n  [:input {:type \"range\"\n           :value value\n           :min min\n           :max max\n           :style {:width \"100%\"}\n           :on-change (fn [e]\n                        (let [new-value (js/parseInt (.. e -target -value))]\n                          (swap! bmi-data\n                                 (fn [data]\n                                   (-> data\n                                       (assoc param new-value)\n                                       (dissoc invalidates)\n                                       (calc-bmi))))))}])\n\n(defn bmi-component []\n  (let [{:keys [weight height bmi]} @bmi-data\n        [color diagnose] (cond\n                          (< bmi 18.5) [\"orange\" \"underweight\"]\n                          (< bmi 25) [\"inherit\" \"normal\"]\n                          (< bmi 30) [\"orange\" \"overweight\"]\n                          :else [\"red\" \"obese\"])]\n    [:div\n     [:h3 \"BMI calculator\"]\n     [:div\n      \"Height: \" (int height) \"cm\"\n      [slider :height height 100 220 :bmi]]\n     [:div\n      \"Weight: \" (int weight) \"kg\"\n      [slider :weight weight 30 150 :bmi]]\n     [:div\n      \"BMI: \" (int bmi) \" \"\n      [:span {:style {:color color}} diagnose]\n      [slider :bmi bmi 10 50 :weight]]]))\n\n\n(defn plot [{:keys [data layout node]}]\n  (r/with-let\n      [f (fn [el]\n           (when el\n             (reset! node el)\n             (r/after-render #(.newPlot Plotly @node (clj->js @data) (clj->js @layout)))))] \n      [:div {:ref f}]\n      (finally (when @node (.purge Plotly @node)))))\n\n(defn update-plot [{:keys [data node]}]\n  (reset! data [{:x (->> (range) (map identity) (take 5))\n                 :y (->> (range) (map #(* 2 %)) (take 5))\n                 :type \"scatter\"}])\n  (when @node\n    (.react Plotly @node (clj->js @data) (clj->js nil))))\n\n\n(defn rolling-box [{:keys [width height ratio]\n                    :or {ratio (/ 9 16)}\n                    :as opt}]\n\n  (r/with-let\n      [node (atom nil)\n       scene (Three/Scene.)\n       camera (Three/PerspectiveCamera. 90 1 0.1 3000)\n       renderer (Three/WebGLRenderer. #js {:alpha true})\n       geometry (Three/BoxGeometry. 500 500 500)\n       box-material (Three/MeshStandardMaterial. #js {:color 0x0000FF})\n       color-bg (Three/Color. 0x808080)\n       box (Three/Mesh. geometry box-material)\n       light (Three/DirectionalLight. 0xFFFFFF 2)\n       ambient (Three/AmbientLight. 0xFFFFFF 0.5)\n       update-size (fn []\n                     (when @node\n                       (let [w (or width (.-clientWidth @node))\n                             h (or height (* w ratio))]\n                         (.setSize renderer w h)\n                         (set! (.-aspect camera) (/ w h))\n                         (.updateProjectionMatrix camera))))\n       f (fn [el]\n           (when el (reset! node el))\n           (r/after-render\n            #(when @node\n               (when-not (.contains @node (.-domElement renderer)) \n                 (.appendChild @node (.-domElement renderer)))\n               (let [width (or width (.-clientWidth @node))\n                     height (or height (* width ratio))\n                     controls (OrbitControls. camera (.-domElement renderer))]\n                 \n                 (update-size)\n                 (js/window.addEventListener \"resize\" update-size)\n                 (.setPixelRatio renderer js/devicePixelRatio)\n                 ;; (set! (.-background scene) color-bg)\n                 (.setClearColor renderer 0x000000 0)\n                 (.set camera.position 0 0 1000)\n                 (.add scene box)\n                 (.add scene light)\n                 (.add scene ambient)\n                 (.set light.position 1 1 1)\n                 (.render renderer scene camera)\n                 (letfn\n                     [(tick []\n                        (js/requestAnimationFrame tick) \n                        (set! (.. box -rotation -x) (+ (.. box -rotation -x) 0.01))\n                        (set! (.. box -rotation -y) (+ (.. box -rotation -y) 0.01))\n                        (.update controls)\n                        (.render renderer scene camera))]\n                     (tick))))))]\n      [:div {:ref f}]\n      (finally (when @node\n                 (.removeChild @node (.-domElement renderer))\n                 (js/window.removeEventListener \"resize\" update-size)))))\n\n(defn sphere-three [{:keys [radius w-segments h-segments color]\n                     :or {radius 1.0\n                          w-segments 32\n                          h-segments 16}}]\n  (let [geom (Three/SphereGeometry. radius w-segments h-segments)\n        material (Three/MeshBasicMaterial. #js {:color color})]\n    (Three/Mesh. geom material)))\n\n(defn hand-joint-three [{:keys [radius color xyz]}]\n  (->> xyz\n       (partition-all 3)\n       (map (fn [[x y z]]\n              (let [mesh (sphere-three {:radius radius :color color})]\n                (.set (.-position mesh) x y z)\n                mesh)))\n       vec))\n\n(defn line-three [p1 p2 {:keys [color] :or {color 0xff0000}}]\n  (let [points (clj->js [p1 p2])\n        geom   (Three/BufferGeometry.)]\n    (.setFromPoints geom points)\n    (Three/Line. geom (Three/LineBasicMaterial. #js {:color color}))))\n\n(defn hand-bone-three [spheres bones color]\n  (map (fn [[i j]]\n         (let [p1 (.-position (nth spheres i))\n               p2 (.-position (nth spheres j))]\n           (line-three p1 p2 {:color color})))\n       bones))\n\n(def hand-bones [[0 1]\n                 [0 5]\n                 [0 17]\n                 [1 2]\n                 [2 3]\n                 [3 4]\n                 [5 6]\n                 [5 9]\n                 [6 7]\n                 [7 8]\n                 [9 10]\n                 [9 13]\n                 [10 11]\n                 [11 12]\n                 [13 14]\n                 [13 17]\n                 [14 15]\n                 [15 16]\n                 [17 18]\n                 [18 19]\n                 [19 20]])\n\n(defn hand [{:keys [width height ratio hand-pos]\n                    :or {ratio (/ 9 16)}\n                    :as opt}]\n\n  (r/with-let\n      [node (atom nil)\n       scene (Three/Scene.)\n       camera (Three/PerspectiveCamera. 90 1 0.1 1000)\n       renderer (Three/WebGLRenderer. #js {:alpha true})\n       hand-joints (hand-joint-three {:radius 0.025 :color 0x00FF00 :xyz hand-pos})\n       hand-lines (hand-bone-three hand-joints hand-bones 0xFF0000)\n       light (Three/DirectionalLight. 0xFFFFFF 2)\n       ambient (Three/AmbientLight. 0xFFFFFF 0.5)\n       update-size (fn []\n                     (when @node\n                       (let [w (or width (.-clientWidth @node))\n                             h (or height (* w ratio))]\n                         (.setSize renderer w h)\n                         (set! (.-aspect camera) (/ w h))\n                         (.updateProjectionMatrix camera))))\n       f (fn [el]\n           (when el (reset! node el))\n           (r/after-render\n            #(when @node\n               (when-not (.contains @node (.-domElement renderer)) \n                 (.appendChild @node (.-domElement renderer)))\n               (let [width (or width (.-clientWidth @node))\n                     height (or height (* width ratio))\n                     controls (OrbitControls. camera (.-domElement renderer))]\n                 \n                 (update-size)\n                 (js/window.addEventListener \"resize\" update-size)\n                 (.setPixelRatio renderer js/devicePixelRatio)\n                 (.setClearColor renderer 0x000000 0)\n                 (println (first hand-joints))\n                 (doseq [a hand-joints] (.add scene a))\n                 (doseq [a hand-lines] (.add scene a))\n                 ;; (run! (fn [sphere] (.add scene %)) hand-joints)\n                 (.set camera.position 0 0 1)\n                 (.add scene light)\n                 (.add scene ambient)\n                 (.set light.position 1 1 1)\n                 (.render renderer scene camera)\n                 (letfn\n                     [(tick []\n                        (js/requestAnimationFrame tick) \n                        (.update controls)\n                        (.render renderer scene camera))]\n                     (tick))))))]\n      [:div {:ref f}]\n      (finally (when @node\n                 (.removeChild @node (.-domElement renderer))\n                 (js/window.removeEventListener \"resize\" update-size)))))\n\n(def data (r/atom  [{:x (->> (range) (map identity) (take 5) )\n                     :y (->> (range) (map #(* % %)) (take 5) )\n                     :type \"scatter\"}]))\n(def layout (r/atom {:title \"Sample\"}))\n(def plot-node (atom nil))\n\n(def hand-landmark ^{:doc \"https://ai.google.dev/edge/mediapipe/solutions/vision/hand_landmarker?hl=ja\"}\n  {:indices {0 \"WRIST\"\n             1 \"THUMB_CMC\"\n             2 \"THUMB_MCP\"\n             3 \"THUMB_IP\"\n             4 \"THUMB_TIP\"\n             5 \"INDEX_FINGER_MCP\"\n             6 \"INDEX_FINGER_PIP\"\n             7 \"INDEX_FINGER_DIP\"\n             8 \"INDEX_FINGER_TIP\"\n             9 \"MIDDLE_FINGER_MCP\"\n             10 \"MIDDLE_FINGER_PIP\"\n             11 \"MIDDLE_FINGER_DIP\"\n             12 \"MIDDLE_FINGER_TIP\"\n             13 \"RING_FINGER_MCP\"\n             14 \"RING_FINGER_PIP\"\n             15 \"RING_FINGER_DIP\"\n             16 \"RING_FINGER_TIP\"\n             17 \"PINKY_MCP\"\n             18 \"PINKY_PIP\"\n             19 \"PINKY_DIP\"\n             20 \"PINKY_TIP\"}})\n\n(def testdata-hand [ 3.56702536e-01,  1.25448644e-01, -3.78144911e-08,  2.58442879e-01,\n        1.67962849e-01, -1.59394536e-02,  1.99230939e-01,  2.85911858e-01,\n       -3.80800664e-02,  2.03225508e-01,  4.03543383e-01, -5.00700623e-02,\n        2.29443818e-01,  4.89487439e-01, -5.64782768e-02,  2.37581402e-01,\n        3.12023699e-01, -1.27338260e-01,  2.10384965e-01,  5.30334234e-01,\n       -1.51995942e-01,  2.20977604e-01,  4.92553204e-01, -1.32310286e-01,\n        2.29686156e-01,  4.23452169e-01, -1.09627999e-01,  3.22596401e-01,\n        3.29260826e-01, -1.24592729e-01,  2.80629992e-01,  5.70023417e-01,\n       -1.57182232e-01,  2.78808087e-01,  5.22696495e-01, -1.32588208e-01,\n        2.88175613e-01,  4.45645958e-01, -1.07170537e-01,  3.93074065e-01,\n        3.47538948e-01, -1.15016364e-01,  3.58776480e-01,  5.64299107e-01,\n       -1.29306167e-01,  3.44347358e-01,  5.19447327e-01, -9.43925604e-02,\n        3.46303612e-01,  4.50459629e-01, -6.68169409e-02,  4.44388539e-01,\n        3.54201496e-01, -1.03972860e-01,  4.14635360e-01,  5.18915653e-01,\n       -1.06505439e-01,  3.98395956e-01,  4.98268008e-01, -8.09545070e-02,\n                    3.97958905e-01,  4.46671903e-01, -5.99709116e-02])\n\n(def current-page (r/atom :home))\n\n(def page-home\n  [:<>\n   [:p.someclass \"Hello world, \" [:strong \"ReagentApp\"] \" is running!\"]\n   [:p [:strong \"\u518d\u63cf\u753b\"] \"\u53ef\u80fd\u306a\u30ea\u30b9\u30c8\"] [lister-simple (->> counters (map-with-key click-counter))]\n   [:p [:strong \"\u518d\u63cf\u753b\"] \"\u53ef\u80fd\u306a\u30ea\u30b9\u30c8\"] [lister-simple (range 3)]\n   [:p] [timer-fn-component]\n   [:p] [shared-state]\n   [:p] [bmi-component]\n   [:p] [:section\n         [:p \"plotly.js \u306b\u3088\u308b\u30d7\u30ed\u30c3\u30c8\"]\n         [plot {:data data :layout layout :node plot-node}]\n         [:button {:on-click #(update-plot {:data data :node plot-node})} \"Update Plot\"]]\n   [:p] [rolling-box {}]\n   [:p] [hand {:hand-pos testdata-hand}]])\n\n(def page-plot [:<>\n   [:p.someclass \"This is \" [:strong \"Plot\"] \" page\"]\n   [:p] [:section\n         [:p \"plotly.js \u306b\u3088\u308b\u30d7\u30ed\u30c3\u30c8\"]\n         [plot {:data data :layout layout :node plot-node}]\n         [:button {:on-click #(update-plot {:data data :node plot-node})} \"Update Plot\"]]])\n\n(defn rooter []\n  (fn []\n    (case @current-page\n      :home page-home\n      :plot page-plot)))\n\n(defn hello [] (rooter))\n\n\n;; (defn timer-component []\n;;   (let [seconds-elapsed (r/atom 0)]\n;;     (fn []\n;;       (js/setTimeout #(swap! seconds-elapsed inc) 1000)\n;;       [:div\n;;        \"Seconds Elapsed: \" @seconds-elapsed])))\n\n;; (defn timer-class-component []\n;;   (let [seconds-elapsed (r/atom 0)]\n;;     (r/create-class                     ;; \u30af\u30e9\u30b9\u306a\u306e\u3067\u5185\u90e8\u72b6\u614b\u3092\u6301\u3066\u308b\n;;      {:component-did-mount              ;; DOM \u306b\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u304c\u30de\u30a6\u30f3\u30c8\u3055\u308c\u305f\u76f4\u5f8c\u306e\u307f\u547c\u3070\u308c\u308b\n;;       (fn []\n;;         (js/setInterval #(swap! seconds-elapsed inc) 1000))\n;;       :reagent-render                   ;; \u30af\u30e9\u30b9\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306b\u5bfe\u3059\u308b render \u51e6\u7406\n;;       (fn []\n;;         [:div \"Seconds Elapsed: \" @seconds-elapsed])})))\n\n;; \u30b0\u30ed\u30fc\u30d0\u30eb\u306e\u6642\u9593\u30ab\u30a6\u30f3\u30c8\n;; (def sec (r/atom 0))\n;; (->> (js/setInterval #(swap! sec inc) 1000))\n"]}