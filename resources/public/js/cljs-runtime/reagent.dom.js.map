{"version":3,"sources":["reagent/dom.cljs"],"mappings":"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","names":["js/reagent","js/reagent.dom","js/reagent.dom.roots","reagent.dom/roots","cljs.core.atom","reagent.dom/unmount-comp","container","cljs.core.swap_BANG_","cljs.core/dissoc","js/module$node_modules$react_dom$index","js/module$node_modules$react_dom$index.unmountComponentAtNode","js/console.warn","reagent.dom/render-comp","comp","callback","js/module$node_modules$react_dom$index.render","*always-update*-orig-val__44104","*always-update*-temp-val__44105","reagent.impl.util/*always-update*","*always-update*-orig-val__44107","*always-update*-temp-val__44108","cljs.core/assoc","reagent.impl.batching/flush-after-render","reagent.dom/re-render-component","var_args","G__44117","reagent.dom/render","js/Error","reagent.dom.render","reagent.impl.template/*current-default-compiler*","callback-or-compiler","reagent.ratom/flush!","vec__44120","cljs.core.nth","compiler","cljs.core/map?","cljs.core/fn?","f","reagent.impl.protocols/as-element","reagent.dom/unmount-component-at-node","reagent.dom/force-update-all","seq__44131","cljs.core/seq","cljs.core/deref","chunk__44132","count__44133","i__44134","vec__44143","temp__5735__auto__","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__44149","cljs.core/first","cljs.core/next"],"sourcesContent":["(ns reagent.dom\n  (:require [react-dom :as react-dom]\n            [reagent.impl.util :as util]\n            [reagent.impl.template :as tmpl]\n            [reagent.impl.batching :as batch]\n            [reagent.impl.protocols :as p]\n            [reagent.ratom :as ratom]))\n\n(defonce ^:private roots (atom {}))\n\n(defn- unmount-comp [container]\n  (swap! roots dissoc container)\n  (when-not (exists? react-dom/unmountComponentAtNode)\n    (js/console.warn \"react-dom/unmountComponentAtNode function doesn't exist, you are likely trying to use the old DOM api with React 19. Use reagent.dom.client instead.\"))\n  (react-dom/unmountComponentAtNode container))\n\n(defn- render-comp [comp container callback]\n  (when-not (exists? react-dom/render)\n    (js/console.warn \"react-dom/render function doesn't exist, you are likely trying to use the old DOM api with React 19. Use reagent.dom.client instead.\"))\n  (binding [util/*always-update* true]\n    (react-dom/render (comp) container\n      (fn []\n        (binding [util/*always-update* false]\n          (swap! roots assoc container comp)\n          (batch/flush-after-render)\n          (if (some? callback)\n            (callback)))))))\n\n(defn- re-render-component [comp container]\n  (render-comp comp container nil))\n\n(defn render\n  \"NOTE: Usable only with React 18 or older. React 19 doesn't provide\n  react-dom/render function.\n\n  Render a Reagent component into the DOM. The first argument may be\n  either a vector (using Reagent's Hiccup syntax), or a React element.\n  The second argument should be a DOM node.\n\n  Optionally takes a callback that is called when the component is in place.\n\n  Returns the mounted component instance.\"\n  ([comp container]\n   (render comp container tmpl/*current-default-compiler*))\n  ([comp container callback-or-compiler]\n   (ratom/flush!)\n   (let [[compiler callback] (cond\n                               (map? callback-or-compiler)\n                               [(:compiler callback-or-compiler) (:callback callback-or-compiler)]\n\n                               (fn? callback-or-compiler)\n                               [tmpl/*current-default-compiler* callback-or-compiler]\n\n                               :else\n                               [callback-or-compiler nil])\n         f (fn []\n             (p/as-element compiler (if (fn? comp) (comp) comp)))]\n     (render-comp f container callback))))\n\n(defn unmount-component-at-node\n  \"Remove a component from the given DOM node.\"\n  [container]\n  (unmount-comp container))\n\n(defn force-update-all\n  \"Force re-rendering of all mounted Reagent components. This is\n  probably only useful in a development environment, when you want to\n  update components in response to some dynamic changes to code.\n\n  Note that force-update-all may not update root components. This\n  happens if a component 'foo' is mounted with `(render [foo])` (since\n  functions are passed by value, and not by reference, in\n  ClojureScript). To get around this you'll have to introduce a layer\n  of indirection, for example by using `(render [#'foo])` instead.\"\n  {:deprecated \"1.2.0\"}\n  []\n  (ratom/flush!)\n  (doseq [[container comp] @roots]\n    (re-render-component comp container))\n  (batch/flush-after-render))\n"]}