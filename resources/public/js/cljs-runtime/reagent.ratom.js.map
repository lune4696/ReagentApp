{"version":3,"sources":["reagent/ratom.cljs"],"mappings":"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","names":["js/reagent","js/reagent.ratom","js/reagent.ratom.debug","reagent.ratom/debug","js/reagent.ratom.generation","reagent.ratom/generation","js/reagent.ratom.-running","reagent.ratom/-running","cljs.core.atom","reagent.ratom/reactive?","reagent.ratom/*ratom-context*","reagent.ratom/running","cljs.core/deref","reagent.ratom/arr-len","x","reagent.ratom/arr-eq","y","len","i","or__4126__auto__","reagent.ratom/in-context","obj","f","*ratom-context*-orig-val__42881","*ratom-context*-temp-val__42882","reagent.ratom/deref-capture","r","res","c","reagent.ratom/notify-deref-watcher!","derefed","temp__5739__auto__","reagent.ratom/check-watches","old","new","cljs.core.swap_BANG_","cljs.core/+","cljs.core/count","reagent.ratom/add-w","this","key","w","cljs.core.assoc","reagent.ratom/remove-w","cljs.core.dissoc","reagent.ratom/notify-w","a","p1__42910#","p2__42911#","p3__42912#","cljs.core/reduce-kv","G__42913","k","reagent.ratom/pr-atom","writer","opts","s","v","cljs.core/-write","cljs.core/pr-writer","*ratom-context*-orig-val__42919","*ratom-context*-temp-val__42920","js/reagent.ratom.rea-queue","reagent.ratom/rea-queue","reagent.ratom/rea-enqueue","reagent.impl.batching/schedule","reagent.ratom/IReactiveAtom","cljs.core/PROTOCOL_SENTINEL","this__4369__auto__","writer__4370__auto__","opt__4371__auto__","reagent.ratom/RAtom","reagent.ratom/->RAtom","state","meta","validator","watches","o","other","new-value","js/Error","old-value","more","cljs.core.apply","_","new-meta","goog/getUid","var_args","G__42967","reagent.ratom/atom","args-arr__4757__auto__","len__4736__auto__","i__4737__auto__","argseq__4758__auto__","cljs.core/IndexedSeq","p__42974","map__42975","cljs.core/hash-map","cljs.core.get","seq42961","G__42962","cljs.core/first","cljs.core/next","self__4723__auto__","reagent.ratom/cached-reaction","destroy","m","cljs.core/-deref","G__42987","G__42988","G__42989","reagent.ratom/make-reaction","cljs.core/dec","cljs.core/inc","reagent.ratom/Track","reagent.ratom/->Track","args","reaction","temp__5737__auto__","cljs.core._EQ_","cljs.core/hash","reagent.ratom/make-track","reagent.ratom/make-track!","t","G__43072","G__43073","G__43074","args__4742__auto__","argseq__4743__auto__","reagent.ratom/track","seq43079","G__43080","cljs.core/ifn?","reagent.ratom/track!","seq43103","G__43104","reagent.ratom/RCursor","reagent.ratom/->RCursor","ratom","path","*ratom-context*-orig-val__43133","*ratom-context*-temp-val__43134","oldstate","newstate","cljs.core/native-satisfies?","cljs.core/IDeref","cljs.core.get_in","cljs.core/reset!","cljs.core/assoc-in","G__43160","G__43165","G__43166","G__43172","G__43173","G__43174","reagent.ratom/cursor","src","cljs.core/vector?","cljs.core.pr_str","reagent.ratom/with-let-destroy","reagent.ratom/with-let-values","reagent$ratom$IDisposable$dispose_BANG_$dyn","x__4428__auto__","m__4429__auto__","reagent.ratom/dispose!","goog/typeOf","m__4426__auto__","cljs.core/missing-protocol","reagent$ratom$IDisposable$add_on_dispose_BANG_$dyn","reagent.ratom/add-on-dispose!","reagent.ratom/IDisposable","reagent$ratom$IRunnable$run$dyn","reagent.ratom/run","reagent.ratom/IRunnable","reagent.ratom/handle-reaction-change","sender","p__43287","map__43288","reagent.ratom/Reaction","reagent.ratom/->Reaction","dirty?","nocache?","watching","auto-run","caught","was-empty","cljs.core/empty?","newval","cljs.core/fn?","oldval","G__43312","G__43313","G__43314","G__43315","G__43316","G__43317","*ratom-context*-orig-val__43264","*ratom-context*-temp-val__43265","cljs.core/set","seq__43271","cljs.core/seq","chunk__43272","count__43273","i__43274","temp__5735__auto__","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","clojure.set.difference","cljs.core/-add-watch","seq__43279","chunk__43280","count__43281","i__43282","cljs.core/-remove-watch","e43286","e","check","on-set","on-dispose","no-cache","reagent.ratom/flush!","non-reactive","wg","seq__43300","chunk__43301","count__43302","i__43303","n__4613__auto__","fexpr__43304","q","reagent.impl.batching/ratom-flush","p__43349","map__43350","seq43340","G__43341","reagent.ratom/temp-reaction","reagent.ratom/run-in-reaction","run","goog.object/set","reagent.ratom/check-derefs","ctx","reagent.ratom/Wrapper","reagent.ratom/->Wrapper","callback","changed","reagent.debug/has-console","reagent.debug/tracking","reagent.debug/track-console","js/console","cljs.core/not","reagent.ratom/make-wrapper","value","callback-fn","reagent.impl.util/make-partial-fn"],"sourcesContent":["(ns reagent.ratom\n  (:refer-clojure :exclude [atom])\n  (:require-macros [reagent.ratom])\n  (:require [reagent.impl.util :as util]\n            [reagent.debug :refer-macros [warn dev?]]\n            [reagent.impl.batching :as batch]\n            [clojure.set :as s]\n            [goog.object :as obj]))\n\n(declare flush!)\n\n(declare ^:dynamic *ratom-context*)\n(defonce ^boolean debug false)\n(defonce ^:private generation 0)\n(defonce ^:private -running (clojure.core/atom 0))\n\n(defn ^boolean reactive? []\n  (some? *ratom-context*))\n\n\n;;; Utilities\n\n(defn running []\n  (+ @-running))\n\n(defn- ^number arr-len [x]\n  (if (nil? x) 0 (alength x)))\n\n(defn- ^boolean arr-eq [x y]\n  (let [len (arr-len x)]\n    (and (== len (arr-len y))\n         (loop [i 0]\n           (or (== i len)\n               (if (identical? (aget x i) (aget y i))\n                 (recur (inc i))\n                 false))))))\n\n(defn- in-context\n  \"When f is executed, if (f) derefs any ratoms, they are then added to 'obj.captured'(*ratom-context*).\n\n  See function notify-deref-watcher! to know how *ratom-context* is updated\"\n  [obj f]\n  (binding [*ratom-context* obj]\n    (f)))\n\n(defn- deref-capture\n  \"Returns `(in-context r f)`.  Calls `_update-watching` on r with any\n  `deref`ed atoms captured during `in-context`, if any differ from the\n  `watching` field of r.  Clears the `dirty?` flag on r.\n\n  Inside '_update-watching' along with adding the ratoms in 'r.watching' of reaction,\n  the reaction is also added to the list of watches on each ratoms f derefs.\"\n  [f ^clj r]\n  (set! (.-captured r) nil)\n  (when (dev?)\n    (set! (.-ratomGeneration r) (set! generation (inc generation))))\n  (let [res (in-context r f)\n        c (.-captured r)]\n    (set! (.-dirty? r) false)\n    ;; Optimize common case where derefs occur in same order\n    (when-not (arr-eq c (.-watching r))\n      (._update-watching r c))\n    res))\n\n(defn- notify-deref-watcher!\n  \"Add `derefed` to the `captured` field of `*ratom-context*`.\n\n  See also `in-context`\"\n  [derefed]\n  (when-some [^clj r *ratom-context*]\n    (let [c (.-captured r)]\n      (if (nil? c)\n        (set! (.-captured r) (array derefed))\n        (.push c derefed)))))\n\n(defn- check-watches [old new]\n  (when debug\n    (swap! -running + (- (count new) (count old))))\n  new)\n\n(defn- add-w [^clj this key f]\n  (let [w (.-watches this)]\n    (set! (.-watches this) (check-watches w (assoc w key f)))\n    (set! (.-watchesArr this) nil)))\n\n(defn- remove-w [^clj this key]\n  (let [w (.-watches this)]\n    (set! (.-watches this) (check-watches w (dissoc w key)))\n    (set! (.-watchesArr this) nil)))\n\n(defn- notify-w [^clj this old new]\n  (let [w (.-watchesArr this)\n        a (if (nil? w)\n            ;; Copy watches to array for speed\n            (->> (.-watches this)\n                 (reduce-kv #(doto %1 (.push %2) (.push %3)) #js[])\n                 (set! (.-watchesArr this)))\n            w)\n        len (alength a)]\n    (loop [i 0]\n      (when (< i len)\n        (let [k (aget a i)\n              f (aget a (inc i))]\n          (f k this old new))\n        (recur (+ 2 i))))))\n\n(defn- pr-atom [a writer opts s v]\n  (-write writer (str \"#object[reagent.ratom.\" s \" \"))\n  (pr-writer (binding [*ratom-context* nil] v) writer opts)\n  (-write writer \"]\"))\n\n\n;;; Queueing\n\n(defonce ^:private rea-queue nil)\n\n(defn- rea-enqueue [r]\n  (when (nil? rea-queue)\n    (set! rea-queue #js [])\n    (batch/schedule))\n  (.push rea-queue r))\n\n;;; Atom\n\n(defprotocol IReactiveAtom)\n\n(deftype RAtom [^:mutable state meta validator ^:mutable watches]\n  IAtom\n  IReactiveAtom\n\n  IEquiv\n  (-equiv [o other] (identical? o other))\n\n  IDeref\n  (-deref [this]\n    (notify-deref-watcher! this)\n    state)\n\n  IReset\n  (-reset! [a new-value]\n    (when-not (nil? validator)\n      (assert (validator new-value) \"Validator rejected reference state\"))\n    (let [old-value state]\n      (set! state new-value)\n      (when-not (nil? watches)\n        (notify-w a old-value new-value))\n      new-value))\n\n  ISwap\n  (-swap! [a f]          (-reset! a (f state)))\n  (-swap! [a f x]        (-reset! a (f state x)))\n  (-swap! [a f x y]      (-reset! a (f state x y)))\n  (-swap! [a f x y more] (-reset! a (apply f state x y more)))\n\n  IWithMeta\n  (-with-meta [_ new-meta] (RAtom. state new-meta validator watches))\n\n  IMeta\n  (-meta [_] meta)\n\n  IPrintWithWriter\n  (-pr-writer [a w opts] (pr-atom a w opts \"RAtom\" {:val (-deref a)}))\n\n  IWatchable\n  (-notify-watches [this old new] (notify-w this old new))\n  (-add-watch [this key f]        (add-w this key f))\n  (-remove-watch [this key]       (remove-w this key))\n\n  IHash\n  (-hash [this] (goog/getUid this)))\n\n(defn atom\n  \"Like clojure.core/atom, except that it keeps track of derefs.\"\n  ([x] (->RAtom x nil nil nil))\n  ([x & {:keys [meta validator]}] (->RAtom x meta validator nil)))\n\n\n;;; track\n\n(declare make-reaction)\n\n(defn- cached-reaction [f ^clj o k ^clj obj destroy]\n  (let [m (.-reagReactionCache o)\n        m (if (nil? m) {} m)\n        r (m k nil)]\n    (cond\n      (some? r) (-deref r)\n      (nil? *ratom-context*) (f)\n      :else (let [r (make-reaction\n                     f :on-dispose (fn [x]\n                                     (when debug (swap! -running dec))\n                                     (as-> (.-reagReactionCache o) _\n                                       (dissoc _ k)\n                                       (set! (.-reagReactionCache o) _))\n                                     (when (some? obj)\n                                       (set! (.-reaction obj) nil))\n                                     (when (some? destroy)\n                                       (destroy x))))\n                  v (-deref r)]\n              (set! (.-reagReactionCache o) (assoc m k r))\n              (when debug (swap! -running inc))\n              (when (some? obj)\n                (set! (.-reaction obj) r))\n              v))))\n\n(deftype Track [f args ^:mutable reaction]\n  IReactiveAtom\n\n  IDeref\n  (-deref [this]\n    (if-some [r reaction]\n      (-deref r)\n      (cached-reaction #(apply f args) f args this nil)))\n\n  IEquiv\n  (-equiv [_ ^clj other]\n    (and (instance? Track other)\n         (= f (.-f other))\n         (= args (.-args other))))\n\n  IHash\n  (-hash [_] (hash [f args]))\n\n  IPrintWithWriter\n  (-pr-writer [a w opts] (pr-atom a w opts \"Track\" {:val (-deref a)\n                                                    :f f})))\n\n(defn make-track [f args]\n  (Track. f args nil))\n\n(defn make-track! [f args]\n  (let [t (make-track f args)\n        r (make-reaction #(-deref t)\n                         :auto-run true)]\n    @r\n    r))\n\n(defn track [f & args]\n  {:pre [(ifn? f)]}\n  (make-track f args))\n\n(defn track! [f & args]\n  {:pre [(ifn? f)]}\n  (make-track! f args))\n\n;;; cursor\n\n(deftype RCursor [ratom path ^:mutable reaction\n                  ^:mutable state ^:mutable watches meta]\n  IAtom\n  IReactiveAtom\n\n  IEquiv\n  (-equiv [_ ^clj other]\n    (and (instance? RCursor other)\n         (= path (.-path other))\n         (= ratom (.-ratom other))))\n\n  Object\n  (_peek [this]\n    (binding [*ratom-context* nil]\n      (-deref this)))\n\n  (_set-state [this oldstate newstate]\n    (when-not (identical? oldstate newstate)\n      (set! state newstate)\n      (when (some? watches)\n        (notify-w this oldstate newstate))))\n\n  IDeref\n  (-deref [this]\n    (let [oldstate state\n          newstate (if-some [r reaction]\n                     (-deref r)\n                     (let [f (if (satisfies? IDeref ratom)\n                               #(get-in @ratom path)\n                               #(ratom path))]\n                       (cached-reaction f ratom path this nil)))]\n      (._set-state this oldstate newstate)\n      newstate))\n\n  IReset\n  (-reset! [this new-value]\n    (let [oldstate state]\n      (._set-state this oldstate new-value)\n      (if (satisfies? IDeref ratom)\n        (if (= path [])\n          (reset! ratom new-value)\n          (swap! ratom assoc-in path new-value))\n        (ratom path new-value))\n      new-value))\n\n  ISwap\n  (-swap! [a f]          (-reset! a (f (._peek a))))\n  (-swap! [a f x]        (-reset! a (f (._peek a) x)))\n  (-swap! [a f x y]      (-reset! a (f (._peek a) x y)))\n  (-swap! [a f x y more] (-reset! a (apply f (._peek a) x y more)))\n\n  IWithMeta\n  (-with-meta [_ new-meta] (RCursor. ratom path reaction\n                                     state watches new-meta))\n\n  IMeta\n  (-meta [_] meta)\n\n  IPrintWithWriter\n  (-pr-writer [a w opts] (pr-atom a w opts \"RCursor\" {:val (-deref a)\n                                                      :path path}))\n  IWatchable\n  (-notify-watches [this old new] (notify-w this old new))\n  (-add-watch [this key f]        (add-w this key f))\n  (-remove-watch [this key]       (remove-w this key))\n\n  IHash\n  (-hash [_] (hash [ratom path])))\n\n(defn cursor\n  [^clj src path]\n  (assert (or (satisfies? IReactiveAtom src)\n              (and (ifn? src)\n                   (not (vector? src))))\n          (str \"src must be a reactive atom or a function, not \"\n               (pr-str src)\n               \" while attempting to get path: \"\n               (pr-str path)))\n  (->RCursor src path nil nil nil nil))\n\n\n;;; with-let support\n\n(defn with-let-destroy [^Reaction v]\n  (when-some [f (.-destroy v)]\n    (f)))\n\n(defn with-let-values [key]\n  (if-some [c *ratom-context*]\n    (cached-reaction (fn [] #js []) c key nil with-let-destroy)\n    #js []))\n\n\n;;;; reaction\n\n(defprotocol IDisposable\n  (dispose! [this])\n  (add-on-dispose! [this f]))\n\n(defprotocol IRunnable\n  (run [this]))\n\n(defn- handle-reaction-change [^clj this sender old new]\n  (._handle-change this sender old new))\n\n;; Fields of a Reaction javascript object\n;; - auto_run\n;; - captured\n;; - caught\n;; - f\n;; - ratomGeneration\n;; - state\n;; - watches\n;; - watching\n(deftype Reaction [f ^:mutable state ^:mutable ^boolean dirty? ^boolean nocache?\n                   ^:mutable watching ^:mutable watches ^:mutable auto-run\n                   ^:mutable caught]\n  IAtom\n  IReactiveAtom\n\n  IWatchable\n  (-notify-watches [this old new] (notify-w this old new))\n  (-add-watch [this key f]        (add-w this key f))\n  (-remove-watch [this key]\n    (let [was-empty (empty? watches)]\n      (remove-w this key)\n      (when (and (not was-empty)\n                 (empty? watches)\n                 (nil? auto-run))\n        (dispose! this))))\n\n  IReset\n  (-reset! [a newval]\n    (assert (fn? (.-on-set a)) \"Reaction is read only; on-set is not allowed\")\n    (let [oldval state]\n      (set! state newval)\n      (.on-set a oldval newval)\n      (notify-w a oldval newval)\n      newval))\n\n  ISwap\n  (-swap! [a f]          (-reset! a (f (._peek-at a))))\n  (-swap! [a f x]        (-reset! a (f (._peek-at a) x)))\n  (-swap! [a f x y]      (-reset! a (f (._peek-at a) x y)))\n  (-swap! [a f x y more] (-reset! a (apply f (._peek-at a) x y more)))\n\n  Object\n  (_peek-at [this]\n    (binding [*ratom-context* nil]\n      (-deref this)))\n\n  (_handle-change [this sender oldval newval]\n    (when-not (or (identical? oldval newval)\n                  dirty?)\n      (if (nil? auto-run)\n        (do\n          (set! dirty? true)\n          (rea-enqueue this))\n        (if (true? auto-run)\n          (._run this false)\n          (auto-run this)))))\n\n  (_update-watching [this derefed]\n    (let [new (set derefed)\n          old (set watching)]\n      (set! watching derefed)\n      (doseq [w (s/difference new old)]\n        (-add-watch w this handle-reaction-change))\n      (doseq [w (s/difference old new)]\n        (-remove-watch w this))))\n\n  (_queued-run [this]\n    (when (and dirty? (some? watching))\n      (._run this true)))\n\n  (_try-capture [this f]\n    (try\n      (set! caught nil)\n      (deref-capture f this)\n      (catch :default e\n        (set! state e)\n        (set! caught e)\n        (set! dirty? false))))\n\n  (_run [this check]\n    (let [oldstate state\n          res (if check\n                (._try-capture this f)\n                (deref-capture f this))]\n      (when-not nocache?\n        (set! state res)\n        ;; Use = to determine equality from reactions, since\n        ;; they are likely to produce new data structures.\n        (when-not (or (nil? watches)\n                      (= oldstate res))\n          (notify-w this oldstate res)))\n      res))\n\n  (_set-opts [this {:keys [auto-run on-set on-dispose no-cache]}]\n    (when (some? auto-run)\n      (set! (.-auto-run this) auto-run))\n    (when (some? on-set)\n      (set! (.-on-set this) on-set))\n    (when (some? on-dispose)\n      (set! (.-on-dispose this) on-dispose))\n    (when (some? no-cache)\n      (set! (.-nocache? this) no-cache)))\n\n  IRunnable\n  (run [this]\n    (flush!)\n    (._run this false))\n\n  IDeref\n  (-deref [this]\n    (when-some [e caught]\n      (throw e))\n    (let [non-reactive (nil? *ratom-context*)]\n      (when non-reactive\n        (flush!))\n      (if (and non-reactive (nil? auto-run))\n        (when dirty?\n          (let [oldstate state]\n            (set! state (f))\n            (when-not (or (nil? watches) (= oldstate state))\n              (notify-w this oldstate state))))\n        (do\n          (notify-deref-watcher! this)\n          (when dirty?\n            (._run this false)))))\n    state)\n\n  IDisposable\n  (dispose! [this]\n    (let [s state\n          wg watching]\n      (set! watching nil)\n      (set! state nil)\n      (set! auto-run nil)\n      (set! dirty? true)\n      (doseq [w (set wg)]\n        (-remove-watch w this))\n      (when (some? (.-on-dispose this))\n        (.on-dispose this s))\n      (when-some [a (.-on-dispose-arr this)]\n        (dotimes [i (alength a)]\n          ((aget a i) this)))))\n\n  (add-on-dispose! [this f]\n    ;; f is called with the reaction as argument when it is no longer active\n    (if-some [a (.-on-dispose-arr this)]\n      (.push a f)\n      (set! (.-on-dispose-arr this) (array f))))\n\n  IEquiv\n  (-equiv [o other] (identical? o other))\n\n  IPrintWithWriter\n  (-pr-writer [a w opts] (pr-atom a w opts \"Reaction\" {:val (-deref a)}))\n\n  IHash\n  (-hash [this] (goog/getUid this)))\n\n(defn flush! []\n  (loop []\n    (let [q rea-queue]\n      (when-not (nil? q)\n        (set! rea-queue nil)\n        (dotimes [i (alength q)]\n          (let [^Reaction r (aget q i)]\n            (._queued-run r)))\n        (recur)))))\n\n(set! batch/ratom-flush flush!)\n\n(defn make-reaction\n  \"Creates a Reaction from a function.\n\n  - :auto-run - starts running the reaction immediately, and runs again when\n  atoms deferenced in the function change.\n  - :on-set - runs when reaction value is updated, before notifying watchers.\n  - :on-dispose - runs when the reaction is disposed.\"\n  [f & {:keys [auto-run on-set on-dispose]}]\n  (let [reaction (->Reaction f nil true false nil nil nil nil)]\n    (._set-opts reaction {:auto-run auto-run\n                          :on-set on-set\n                          :on-dispose on-dispose})\n    reaction))\n\n\n\n(def ^:private temp-reaction (make-reaction nil))\n\n\n(defn run-in-reaction\n  \"Evaluates `f` and returns the result.  If `f` calls `deref` on any ratoms,\n   creates a new Reaction that watches those atoms and calls `run` whenever\n   any of those watched ratoms change.  Also, the new reaction is added to\n   list of 'watches' of each of the ratoms. The `run` parameter is a function\n   that should expect one argument.  It is passed `obj` when run.  The `opts`\n   are any options accepted by a Reaction and will be set on the newly created\n   Reaction. Sets the newly created Reaction to the `key` on `obj`.\"\n  [f obj key run opts]\n  (let [r temp-reaction\n        res (deref-capture f r)]\n    (when-not (nil? (.-watching r))\n      (set! temp-reaction (make-reaction nil))\n      (._set-opts r opts)\n      (set! (.-f r) f)\n      (set! (.-auto-run r) #(run obj))\n      (obj/set obj key r))\n    res))\n\n(defn check-derefs [f]\n  (let [ctx (js-obj)\n        res (in-context ctx f)]\n    [res (some? (.-captured ctx))]))\n\n\n;;; wrap\n\n(deftype Wrapper [^:mutable state callback ^:mutable ^boolean changed\n                  ^:mutable watches]\n\n  IAtom\n\n  IDeref\n  (-deref [this]\n    (when (dev?)\n      (when (and changed (some? *ratom-context*))\n        (warn \"derefing stale wrap: \"\n              (pr-str this))))\n    state)\n\n  IReset\n  (-reset! [this newval]\n    (let [oldval state]\n      (set! changed true)\n      (set! state newval)\n      (when (some? watches)\n        (notify-w this oldval newval))\n      (callback newval)\n      newval))\n\n  ISwap\n  (-swap! [a f]          (-reset! a (f state)))\n  (-swap! [a f x]        (-reset! a (f state x)))\n  (-swap! [a f x y]      (-reset! a (f state x y)))\n  (-swap! [a f x y more] (-reset! a (apply f state x y more)))\n\n  IEquiv\n  (-equiv [this ^clj other]\n    (and (instance? Wrapper other)\n         ;; If either of the wrappers have changed, equality\n         ;; cannot be relied on.\n         (not changed)\n         (not (.-changed other))\n         (= state (.-state other))\n         (= callback (.-callback other))))\n\n  IWatchable\n  (-notify-watches [this old new] (notify-w this old new))\n  (-add-watch [this key f]        (add-w this key f))\n  (-remove-watch [this key]       (remove-w this key))\n\n  IPrintWithWriter\n  (-pr-writer [a w opts] (pr-atom a w opts \"Wrapper\" {:val (-deref a)})))\n\n(defn make-wrapper [value callback-fn args]\n  (->Wrapper value\n             (util/make-partial-fn callback-fn args)\n             false nil))\n\n\n\n\n#_(do\n  (defn ratom-perf []\n    (set! debug false)\n    (dotimes [_ 10]\n      (let [nite 100000\n            a (atom 0)\n            f (fn []\n                (quot @a 10))\n            mid (make-reaction f)\n            res (track! (fn []\n                          ;; (with-let [x 1])\n                          ;; @(track f)\n                          (inc @mid)\n                          ))]\n        @res\n        (time (dotimes [x nite]\n                (swap! a inc)\n                (flush!)))\n        (dispose! res))))\n  (ratom-perf))\n"]}