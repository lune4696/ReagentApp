{"version":3,"sources":["app/ui.cljs"],"mappings":";AAIA,AAAA,AAAMA;AAAN,AACE,AAAAC,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAAC;AAAA,AAAA,AAAA,AAAAD,AAAA;AAAA;AAAA,AAAAE,AAAAF;AAAA,AAAA,AAAA,AAAA,AAAAF,AAAA,AAAAI;AAAA,AAAA,AAAAC;AAAA,AAAA,AAAA,AAAAC,AAAAC,AAAAC,AAAA,AAAA,AAAA;;AAAA;;AAAA;;AAAA,AAAA,AAAAR,AAAA,AAAAI;;;AAAA,AAAAK,AAAA,AAAA,AAAAT,AAAA;AAAA,AAAA,AAAAS,AAAA,AAAAC,AAAA,AAAAV,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAA,AAAA,AAAaa,AAAI,AAAA,AAACC;AAAlBH,AAAA;AACE,AAAA,AAACI;AAAD,AAAgB,AAACC,AAAMH,AAAII;AAA3B;;AADF,AAAA,AAAA,AAAA,AAAAL,AAE6BC;;;AAF7B,AAAAF;;AAIF,AAAA,AAAMQ,AAIHC;AAJH,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAR,AAAA,AAAA,AAAAM,AAMmBE;AANnB,AAOuB,AAACC,AAAOD,AAAM,AAAA,AAAAF;;;AAErC,AAAA,AAAMI,AAAQC,AAAOC,AAAMJ,AAAMK,AAAIC,AAAIC,AAAYC;AAArD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEkBR,AACFK,AACAC,AAEM,AAAKG;AAAL,AACE,AAAMC,AAAU,AAACC,AAAY,AAAA,AAAIF;AAAjC,AACE,AAACb,AAAMO,AACA,AAAKS;AAAL,AACMA,AACA,AAACC,AAAMT,AAAMM,AACb,AAACI,AAAOP,AACR,AAAAQ;AAAA,AAAA,AAAAA,AAAAA,AAACP,AAAAA,AAAAA;;;;AAExC;;;AAAA,AAAMQ,AAOHC;AAPH,AAAA,AAAA,AAO0B,AAACC,AAAY,AAAKC,AAAEC;AAAP,AAAU,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC,AAAwBD,AAASD;AAA/DF","names":["app.ui/timer","with-let44123","reagent.ratom/with-let-values","temp__5739__auto__","reagent.ratom/*ratom-context*","c__34574__auto__","reagent.debug/has-console","reagent.debug/tracking","reagent.debug/track-console","js/console","init44124","cljs.core/not","res44125","cljs.core/deref","sec","reagent.core.atom","js/setTimeout","cljs.core.swap_BANG_","cljs.core/inc","p1__44126#","app.ui/text-input","value","cljs.core/reset!","app.ui/slider","target","param","min","max","invalidates","recalc","e","new-value","js/parseInt","data","cljs.core.assoc","cljs.core.dissoc","G__44127","app.ui/lister","items","cljs.core.map_indexed","i","c","cljs.core/with-meta"],"sourcesContent":["(ns app.ui\n  (:require [reagent.core :as r]))\n\n\n(defn timer []\n  (r/with-let [sec (r/atom 0)]\n    (js/setTimeout #(swap! sec inc) 1000)\n    [:div \"Seconds Elapsed: \" @sec]))\n\n(defn text-input\n  {:comments [\":input \u30de\u30c3\u30d7\u306e :on-change \u95a2\u6570\u306b\u306f react \u304b\u3089 event object \u304c\u6e21\u3055\u308c\u308b\"\n              \".-<any> \u306f\u30d5\u30a3\u30fc\u30eb\u30c9\u30a2\u30af\u30bb\u30b9\"\n              \"\u3053\u306e\u5834\u5408 event.target.value \u3067 value \u3092\u66f4\u65b0\u3057\u3066\u3044\u308b\"]}\n  [value]\n  [:input {:type \"text\"\n           :value @value\n           :on-change #(reset! value (-> % .-target .-value))}])\n\n(defn slider [target param value min max invalidates recalc]\n  [:input {:type \"range\"\n           :value value\n           :min min\n           :max max\n           :style {:width \"100%\"}\n           :on-change (fn [e]\n                        (let [new-value (js/parseInt (.. e -target -value))]\n                          (swap! target\n                                 (fn [data]\n                                   (-> data\n                                       (assoc param new-value)\n                                       (dissoc invalidates)\n                                       (recalc))))))}])\n\n(defn lister\n  {:doc \"\u30ea\u30b9\u30c8\"\n   :comments [\"^{:key item} \u306f\u5fc5\u305a\u3057\u3082\u5fc5\u8981\u306a\u3044\u304c\u3001\u30ea\u30b9\u30c8\u306b\u5bfe\u3057\u3066\u30e6\u30cb\u30fc\u30af\u30ad\u30fc\u3092\u4ed8\u4e0e\u3059\u308b\u3068\n               React \u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u6539\u5584\u306b\u5f79\u7acb\u3064 (by reagent tutorial)\"\n              \"\u5b9f\u969b\u306b\u306f\u5f15\u304d\u6e21\u3055\u306a\u3044\u3068\u63cf\u753b\u30d0\u30b0\u304c\u8d77\u304d\u3084\u3059\u3044\u306e\u3067\u3001\u7d76\u5bfe\u6e21\u3055\u306a\u3044\u3068\u3044\u3051\u306a\u3044\"\n              \"\u30ad\u30fc\u306e\u4ed8\u4e0e\u306f\u3001\u4e0a\u8a18\u306e\u3088\u3046\u306b\u30e1\u30bf\u30c7\u30fc\u30bf\u304b\u3001\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306e\u7b2c\u4e00\u5f15\u6570\u3068\u3057\u3066\u6e21\u3059\"\n              \"ul: un-ordered list, ol: ordered-list, li: list\"]}\n  [items] [:ul (->> items (map-indexed (fn [i c] (with-meta [:li \"Item: \" c] {:key i}))))])\n"]}