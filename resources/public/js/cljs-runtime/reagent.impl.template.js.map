{"version":3,"sources":["reagent/impl/template.cljs"],"mappings":"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","names":["this__4369__auto__","writer__4370__auto__","opt__4371__auto__","cljs.core/-write","reagent.impl.template/UnsafeHTML","reagent.impl.template/->UnsafeHTML","s","reagent.impl.template/re-tag","reagent.impl.template/NativeWrapper","reagent.impl.template/->NativeWrapper","tag","id","className","reagent.impl.template/adapt-react-class","c","reagent.impl.template/hiccup-tag?","x","reagent.impl.util/named?","reagent.impl.template/valid-tag?","cljs.core/ifn?","reagent.impl.template/prop-name-cache","reagent.impl.template/cache-get","o","k","goog.object/get","reagent.impl.template/cached-prop-name","temp__5737__auto__","k'","cljs.core/name","v","reagent.impl.util/dash-to-prop-name","goog.object/set","reagent.impl.template/kv-conv","G__43930","reagent.impl.template/convert-prop-value","reagent.impl.util/js-val?","cljs.core/map?","cljs.core/reduce-kv","cljs.core/coll?","cljs.core/clj->js","args","cljs.core.apply","reagent.impl.template/custom-prop-name-cache","reagent.impl.template/cached-custom-prop-name","reagent.impl.template/custom-kv-conv","G__43950","reagent.impl.template/convert-custom-prop-value","reagent.impl.template/set-id-class","props","id-class","class","G__43960","cljs.core.assoc","reagent.impl.util.class_names","or__4126__auto__","reagent.impl.template/convert-props","G__43964","js-props","temp__5735__auto__","d","and__4115__auto__","reagent.impl.template/make-element","this","argv","component","jsprops","first-child","G__43965","cljs.core/count","js/module$node_modules$react$index.createElement","reagent.impl.protocols/as-element","cljs.core.nth","a","reagent.impl.template/HiccupTag","reagent.impl.template/->HiccupTag","custom","reagent.impl.template/parse-tag","hiccup-tag","vec__43981","cljs.core/re-matches","cljs.core/next","clojure.string/replace","js/Error","reagent.impl.component/comp-name","cljs.core.not_EQ_","reagent.impl.template/reag-element","compiler","reagent.impl.component/as-class","temp__5739__auto__","key","reagent.impl.util/react-key-from-vec","reagent.impl.template/function-element","first-arg","cljs.core.subvec","reagent.impl.component/functional-render-fn","reagent.impl.template/maybe-function-element","reagent.impl.component/react-class?","reagent.impl.template/fragment-element","hasprops","reagent.impl.protocols/make-element","js/module$node_modules$react$index.Fragment","reagent.impl.template/tag-name-cache","reagent.impl.template/cached-parse","_","reagent.impl.template/native-element","parsed","first","reagent.impl.input/input-component?","react-key","reagent.impl.util/get-react-key","input-class","reagent.impl.component/create-class","reagent.impl.input/input-spec","cljs.core/with-meta","cljs.core.merge","cljs.core/meta","reagent.impl.template/raw-element","comp","reagent.impl.template/expand-seq","cljs.core.into_array","p1__44031#","cljs.core.map","reagent.impl.template/expand-seq-dev","val","cljs.core/vector?","reagent.impl.template/expand-seq-check","vec__44043","ctx","res","derefed","reagent.ratom/check-derefs","reagent.debug/has-console","reagent.debug/tracking","reagent.debug/track-console","js/console","reagent.impl.util.hiccup_err","reagent.impl.template/hiccup-element","n","pos","G__44046","reagent.impl.protocols/parse-tag","cljs.core._EQ_","cljs.core.subs","reagent.impl.template/vec-to-elem","fn-to-element","js/console.error","cljs.core.pr_str","G__44050","cljs.core/Keyword","reagent.impl.template/as-element","cljs.core/seq?","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","cljs.core/IPrintWithWriter","reagent.impl.template/create-compiler","opts","cljs.core.gensym","parse-fn","cljs.core.get","js/reagent","js/reagent.impl","js/reagent.impl.template","js/reagent.impl.template.t_reagent$impl$template44053","reagent.impl.template/t_reagent$impl$template44053","_44055","meta44054","reagent.impl.template/->t_reagent$impl$template44053","tag-name","tag-value","reagent.impl.template/class-compiler","reagent.impl.template/*current-default-compiler*","reagent.impl.template/set-default-compiler!"],"sourcesContent":["(ns reagent.impl.template\n  (:require [react :as react]\n            [clojure.string :as string]\n            [reagent.impl.util :as util :refer [named?]]\n            [reagent.impl.component :as comp]\n            [reagent.impl.input :as input]\n            [reagent.impl.protocols :as p]\n            [reagent.ratom :as ratom]\n            [reagent.debug :refer-macros [dev? warn]]\n            [goog.object :as gobj]))\n\n(deftype UnsafeHTML [s])\n\n;; From Weavejester's Hiccup, via pump:\n(def ^{:doc \"Regular expression that parses a CSS-style id and class\n             from a tag name.\"}\n  re-tag #\"([^\\s\\.#]+)(?:#([^\\s\\.#]+))?(?:\\.([^\\s#]+))?\")\n\n(deftype NativeWrapper [tag id className])\n\n(defn adapt-react-class\n  [c]\n  (->NativeWrapper c nil nil))\n\n;;; Common utilities\n\n(defn ^boolean hiccup-tag? [x]\n  (or (named? x)\n      (string? x)))\n\n(defn ^boolean valid-tag? [x]\n  (or (hiccup-tag? x)\n      (ifn? x)\n      (instance? NativeWrapper x)))\n\n;;; Props conversion\n\n;; TODO: Move prop-name caches to the compiler object, if this\n;; conversion can be configured.\n\n(def prop-name-cache #js{:class \"className\"\n                         :for \"htmlFor\"\n                         :charset \"charSet\"})\n\n(defn cache-get [o k]\n  (when ^boolean (.hasOwnProperty o k)\n    (gobj/get o k)))\n\n(defn cached-prop-name [k]\n  (if (named? k)\n    (if-some [k' (cache-get prop-name-cache (name k))]\n      k'\n      (let [v (util/dash-to-prop-name k)]\n        (gobj/set prop-name-cache (name k) v)\n        v))\n    k))\n\n(declare convert-prop-value)\n\n(defn kv-conv [o k v]\n  (doto o\n    (gobj/set (cached-prop-name k) (convert-prop-value v))))\n\n(defn convert-prop-value [x]\n  (cond (util/js-val? x) x\n        (named? x) (name x)\n        (map? x) (reduce-kv kv-conv #js{} x)\n        (coll? x) (clj->js x)\n        (ifn? x) (fn [& args]\n                   (apply x args))\n        :else (clj->js x)))\n\n;; Previous few functions copied for custom elements,\n;; without mapping from class to className etc.\n\n(def custom-prop-name-cache #js{})\n\n(defn cached-custom-prop-name [k]\n  (if (named? k)\n    (if-some [k' (cache-get custom-prop-name-cache (name k))]\n      k'\n      (let [v (util/dash-to-prop-name k)]\n        (gobj/set custom-prop-name-cache (name k) v)\n        v))\n    k))\n\n(defn custom-kv-conv [o k v]\n  (doto o\n    (gobj/set (cached-custom-prop-name k) (convert-prop-value v))))\n\n(defn convert-custom-prop-value [x]\n  (cond (util/js-val? x) x\n        (named? x) (name x)\n        (map? x) (reduce-kv custom-kv-conv #js{} x)\n        (coll? x) (clj->js x)\n        (ifn? x) (fn [& args]\n                   (apply x args))\n        :else (clj->js x)))\n\n(defn set-id-class\n  \"Takes the id and class from tag keyword, and adds them to the\n  other props. Parsed tag is JS object with :id and :class properties.\"\n  [props id-class]\n  (let [id (.-id id-class)\n        class (.-className id-class)]\n    (cond-> props\n      ;; Only use ID from tag keyword if no :id in props already\n      (and (some? id)\n           (nil? (:id props)))\n      (assoc :id id)\n\n      ;; Merge classes\n      class\n      ;; Note: someone might use React-style :className property,\n      ;; this is the only place where that needs special case. Using\n      ;; :class and :className together is not supported.\n      (assoc :class (util/class-names class (or (:class props) (:className props)))))))\n\n(defn convert-props [props ^clj id-class]\n  (let [class (:class props)\n        props (-> props\n                  (cond-> class (assoc :class (util/class-names class)))\n                  (set-id-class id-class))\n        ^js js-props (if (.-custom id-class)\n                       (convert-custom-prop-value props)\n                       (convert-prop-value props))]\n    ;; Ensure only tagged values are used for dangerouslySetInnerHTML\n    (when-let [d (and js-props (.-dangerouslySetInnerHTML js-props))]\n      (if (instance? UnsafeHTML d)\n        (set! (.-dangerouslySetInnerHTML js-props) #js {:__html (.-s d)})\n        (js-delete js-props \"dangerouslySetInnerHTML\")))\n    js-props))\n\n;;; Conversion from Hiccup forms\n\n(defn make-element [this argv component jsprops first-child]\n  (case (- (count argv) first-child)\n    ;; Optimize cases of zero or one child\n    0 (react/createElement component jsprops)\n\n    1 (react/createElement component jsprops\n                           (p/as-element this (nth argv first-child nil)))\n\n    (.apply react/createElement nil\n            (reduce-kv (fn [a k v]\n                         (when (>= k first-child)\n                          (.push a (p/as-element this v)))\n                         a)\n                       #js [component jsprops] argv))))\n\n(deftype HiccupTag [tag id className custom])\n\n(defn parse-tag [hiccup-tag]\n  (let [[tag id className] (->> hiccup-tag name (re-matches re-tag) next)\n        className (when-not (nil? className)\n                    (string/replace className #\"\\.\" \" \"))]\n    (assert tag (str \"Invalid tag: '\" hiccup-tag \"'\" (comp/comp-name)))\n    (->HiccupTag tag\n                 id\n                 className\n                 ;; Custom element names must contain hyphen\n                 ;; https://www.w3.org/TR/custom-elements/#custom-elements-core-concepts\n                 (not= -1 (.indexOf tag \"-\")))))\n\n(defn reag-element [tag v compiler]\n  (let [c (comp/as-class tag compiler)\n        jsprops #js {}]\n    (set! (.-argv jsprops) v)\n    (when-some [key (util/react-key-from-vec v)]\n      (set! (.-key jsprops) key))\n    (react/createElement c jsprops)))\n\n(defn function-element [tag v first-arg compiler]\n  (let [jsprops #js {}]\n    (set! (.-reagentRender jsprops) tag)\n    (set! (.-argv jsprops) (subvec v first-arg))\n    ; (set! (.-opts jsprops) opts)\n    (when-some [key (util/react-key-from-vec v)]\n      (set! (.-key jsprops) key))\n    (react/createElement (comp/functional-render-fn compiler tag) jsprops)))\n\n(defn maybe-function-element\n  \"If given tag is a Class, use it as a class,\n  else wrap in Reagent function wrapper.\"\n  [tag v compiler]\n  (if (comp/react-class? tag)\n    (reag-element tag v compiler)\n    (function-element tag v 1 compiler)))\n\n(defn fragment-element [argv compiler]\n  (let [props (nth argv 1 nil)\n        hasprops (or (nil? props) (map? props))\n        jsprops (or (convert-prop-value (if hasprops props))\n                    #js {})\n        first-child (+ 1 (if hasprops 1 0))]\n    (when-some [key (util/react-key-from-vec argv)]\n      (set! (.-key jsprops) key))\n    (p/make-element compiler argv react/Fragment jsprops first-child)))\n\n(def tag-name-cache #js {})\n\n(defn cached-parse [this x _]\n  (if-some [s (cache-get tag-name-cache x)]\n    s\n    (let [v (parse-tag x)]\n      (gobj/set tag-name-cache x v)\n      v)))\n\n;; This is used for html elements (:h1, :input) and also React component with :>/adapt-react-class\n(defn native-element [parsed argv first ^p/Compiler compiler]\n  (let [component (.-tag parsed)\n        props (nth argv first nil)\n        hasprops (or (nil? props) (map? props))\n        jsprops (or (convert-props (if hasprops props) parsed)\n                    #js {})\n        first-child (+ first (if hasprops 1 0))]\n    (if (input/input-component? component)\n      (let [;; Also read :key from props map, because\n            ;; input wrapper will not place the key in useful place.\n            react-key (util/get-react-key props)\n            input-class (or (.-reagentInput compiler)\n                            (let [x (comp/create-class input/input-spec compiler)]\n                              (set! (.-reagentInput compiler) x)\n                              x))]\n        (p/as-element\n          compiler\n          (with-meta [input-class argv component jsprops first-child compiler]\n                     (merge (when react-key\n                              {:key react-key})\n                            (meta argv)))))\n      (do\n        (when-some [key (-> (meta argv) util/get-react-key)]\n          (set! (.-key jsprops) key))\n        (p/make-element compiler argv component jsprops first-child)))))\n\n(defn raw-element [comp argv compiler]\n  (let [props (nth argv 2 nil)\n        jsprops (or props #js {})]\n    ;; If we have key attached to vector metadata, copy that to the\n    ;; jsprops.\n    ;; Often the key is already on the jsprops.\n    (when-some [key (-> (meta argv) util/get-react-key)]\n      (set! (.-key jsprops) key))\n    (p/make-element compiler argv comp jsprops 3)))\n\n(defn expand-seq [s compiler]\n  (into-array (map #(p/as-element compiler %) s)))\n\n(defn expand-seq-dev [s ^clj o compiler]\n  (into-array (map (fn [val]\n                     (when (and (vector? val)\n                                (nil? (util/react-key-from-vec val)))\n                       (set! (.-no-key o) true))\n                     (p/as-element compiler val))\n                   s)))\n\n(defn expand-seq-check [x compiler]\n  (let [ctx #js {}\n        [res derefed] (ratom/check-derefs #(expand-seq-dev x ctx compiler))]\n    (when derefed\n      (warn (util/hiccup-err x (comp/comp-name) \"Reactive deref not supported in lazy seq, \"\n                        \"it should be wrapped in doall\")))\n    (when (.-no-key ctx)\n      (warn (util/hiccup-err x (comp/comp-name) \"Every element in a seq should have a unique :key\")))\n    res))\n\n(defn hiccup-element [v compiler]\n  (let [tag (nth v 0 nil)\n        n (name tag)\n        pos (.indexOf n \">\")]\n    (case pos\n      -1 (native-element (p/parse-tag compiler n tag) v 1 compiler)\n      0 (assert (= \">\" n) (util/hiccup-err v (comp/comp-name) \"Invalid Hiccup tag\"))\n      ;; Support extended hiccup syntax, i.e :div.bar>a.foo\n      ;; Apply metadata (e.g. :key) to the outermost element.\n      ;; Metadata is probably used only with sequeneces, and in that case\n      ;; only the key of the outermost element matters.\n      (recur (with-meta [(subs n 0 pos)\n                         (assoc (with-meta v nil) 0 (subs n (inc pos)))]\n                        (meta v))\n             compiler))))\n\n(defn vec-to-elem [v compiler fn-to-element]\n  (when (nil? compiler)\n    (js/console.error \"vec-to-elem\" (pr-str v)))\n  (assert (pos? (count v)) (util/hiccup-err v (comp/comp-name) \"Hiccup form should not be empty\"))\n  (let [tag (nth v 0 nil)]\n    (assert (valid-tag? tag) (util/hiccup-err v (comp/comp-name) \"Invalid Hiccup form\"))\n    (case tag\n      :> (native-element (->HiccupTag (nth v 1 nil) nil nil nil) v 2 compiler)\n      :r> (raw-element (nth v 1 nil) v compiler)\n      :f> (function-element (nth v 1 nil) v 2 compiler)\n      :<> (fragment-element v compiler)\n      (cond\n       (hiccup-tag? tag)\n       (hiccup-element v compiler)\n\n       (instance? NativeWrapper tag)\n       (native-element tag v 1 compiler)\n\n       :else (fn-to-element tag v compiler)))))\n\n(defn as-element [this x fn-to-element]\n  (cond (util/js-val? x) x\n        (vector? x) (vec-to-elem x this fn-to-element)\n        (seq? x) (if (dev?)\n                   (expand-seq-check x this)\n                   (expand-seq x this))\n        (named? x) (name x)\n        (satisfies? IPrintWithWriter x) (pr-str x)\n        :else x))\n\n(defn create-compiler [opts]\n  (let [id (gensym \"reagent-compiler\")\n        fn-to-element (if (:function-components opts)\n                        maybe-function-element\n                        reag-element)\n        parse-fn (get opts :parse-tag cached-parse)]\n\n    (reify p/Compiler\n      ;; This is used to as cache key to cache component fns per compiler\n      (get-id [this] id)\n      (parse-tag [this tag-name tag-value]\n        (parse-fn this tag-name tag-value))\n      (as-element [this x]\n        (as-element this x fn-to-element))\n      (make-element [this argv component jsprops first-child]\n        (make-element this argv component jsprops first-child)))))\n\n(def class-compiler (create-compiler {}))\n(def ^:dynamic *current-default-compiler* class-compiler)\n\n(defn set-default-compiler! [compiler]\n  (set! *current-default-compiler* compiler))\n"]}