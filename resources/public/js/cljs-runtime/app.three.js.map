{"version":3,"sources":["app/three.cljs"],"mappings":";;AAGA;;;AAAA,AAAMA,AAEHC,AAAKC,AAAMC,AAAOC,AAAMC,AAASC;AAFpC,AAE4C,AAAA,AAAAC,AAAON;AAAP,AACE,AAAMO,AAAE,AAAAC,AAAIP;AAAJ,AAAA,AAAAO;AAAAA;;AAAU,AAAA,AAAAF,AAAgBN;;;AAC5BS,AAAE,AAAAD,AAAIN;AAAJ,AAAA,AAAAM;AAAAA;;AAAW,AAAGD,AAAEJ;;;AADxB,AAEE,AAAUC,AAASG,AAAEE;;AACrB,AAAM,AAAUJ,AAAQ,AAAGE,AAAEE;;AAC7B,AAAyBJ;;AAL7B;;;AAO5C;;;AAAA,AAAMK,AAEHC,AAAMP,AAASC,AAAOO,AAAMC;AAF/B,AAGE,AAAgBT,AAASU;;AAEzB,AAAA,AAAA,AAAgBV;;AAChB,AAAA,AAAA,AAAA,AAAM,AAAAC;;AACN,AAAMM,AAAMC;;AACZ,AAAMD,AAAME;;AACZ,AAAA,AAAA,AAAA,AAAM,AAAAD;;AAER,AAAA,AAAAG,AAAMM;AAAN,AAAA,AAAAL,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAAA,AAA4BM;AAA5B,AAAAF,AAAAJ,AAAA,AAAA,AAAmCO;AAAnC,AAAAH,AAAAJ,AAAA,AAAA,AAA8CQ;AAA9C,AAAAJ,AAAAJ,AAAA,AAAyDS;AAAzD,AAIE,AAAMC,AAAK,AAAAC,AAAuBL,AAAOC,AAAWC;AAC9CI,AAAS,AAAAC,AAAA,AAAsCJ;AADrD,AAEE,AAAAK,AAAaJ,AAAKE;;AAEtB,AAAA,AAAAG,AAAME,AAAYC,AAAGC;AAArB,AAAA,AAAAH,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAf,AAAA,AAAAe,AAAA,AAAA,AAAA,AAAA,AAAAd,AAAAC,AAAAa,AAAAA;AAAA,AAAAZ,AAAAY,AAAA,AAAA,AAAgCP;AAAhC,AACE,AAAMW,AAAO,AAAA,AAACC,AAASH,AAAGC;AACpBT,AAAO,AAAAY;AADb,AAEE,AAAgBZ,AAAKU;;AACrB,AAAAG,AAAab,AAAK,AAAAc,AAAA,AAAsCf;;AAE5D,AAAA,AAAAgB,AAAMG,AAAOC;AAAb,AAAA,AAAAH,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAAqBI;AAArB,AAAAH,AAAAD,AAAA,AAAA,AAAuBK;AAAvB,AAAAJ,AAAAD,AAAA,AAAA,AAAyBM;AAAzB,AAA6B,AAAM,AAAYH,AAAQC,AAAEC,AAAEC","names":["app.three/resize-view","node","width","height","ratio","renderer","camera","cljs.core/deref","w","or__4126__auto__","h","app.three/init-view","scene","light","ambient","js/devicePixelRatio","p__37087","map__37088","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","app.three/sphere-three","radius","w-segments","h-segments","color","geom","js/module$node_modules$three$build$three_cjs.SphereGeometry","material","js/module$node_modules$three$build$three_cjs.MeshBasicMaterial","js/module$node_modules$three$build$three_cjs.Mesh","p__37090","map__37091","app.three/line-three","p1","p2","points","cljs.core/clj->js","js/module$node_modules$three$build$three_cjs.BufferGeometry","js/module$node_modules$three$build$three_cjs.Line","js/module$node_modules$three$build$three_cjs.LineBasicMaterial","p__37093","vec__37094","cljs.core.nth","app.three/repos","target","x","y","z"],"sourcesContent":["(ns app.three\n  (:require [\"three\" :as Three]))\n\n(defn resize-view\n  {:doc \"\u753b\u9762\u306e\u30ea\u30b5\u30a4\u30ba\u3092\u884c\u3046\"}\n  [node width height ratio renderer camera] (when @node\n                                              (let [w (or width (.-clientWidth @node))\n                                                    h (or height (* w ratio))]\n                                                (.setSize renderer w h)\n                                                (set! (.-aspect camera) (/ w h))\n                                                (.updateProjectionMatrix camera))))\n\n(defn init-view\n  {:doc \"\u753b\u9762\u306e\u57fa\u672c\u7684\u306a\u521d\u671f\u8a2d\u5b9a\u3092\u884c\u3046\u95a2\u6570\"}\n  [scene renderer camera light ambient]\n  (.setPixelRatio renderer js/devicePixelRatio)\n  ;; (set! (.-background scene) color-bg)\n  (.setClearColor renderer 0x000000 0)\n  (.set camera.position 0 0 1000)\n  (.add scene light)\n  (.add scene ambient)\n  (.set light.position 1 1 1))\n\n(defn sphere-three [{:keys [radius w-segments h-segments color]\n                     :or {radius 1.0\n                          w-segments 32\n                          h-segments 16}}]\n  (let [geom (Three/SphereGeometry. radius w-segments h-segments)\n        material (Three/MeshBasicMaterial. #js {:color color})]\n    (Three/Mesh. geom material)))\n\n(defn line-three [p1 p2 {:keys [color] :or {color 0xff0000}}]\n  (let [points (clj->js [p1 p2])\n        geom   (Three/BufferGeometry.)]\n    (.setFromPoints geom points)\n    (Three/Line. geom (Three/LineBasicMaterial. #js {:color color}))))\n\n(defn repos [target [x y z]] (.set (.-position target) x y z))\n"]}